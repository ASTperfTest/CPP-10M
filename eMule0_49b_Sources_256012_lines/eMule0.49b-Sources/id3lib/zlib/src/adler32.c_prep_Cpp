/* adler32.c -- compute the Adler-32 checksum of a data stream
 * Copyright (C) 1995-2002 Mark Adler
 * For conditions of distribution and use, see copyright notice in zlib.h
 */

/* @(#) $Id: adler32.c,v 1.4 2002/06/28 12:01:00 t1mpy Exp $ */

void INCLUDEREPLACE(){CX_INCL("zlib.h");}



/* 5552 is the largest n such that 255n(n+1)/2 + (n+1)(65521L -1) <= 2^32-1 */







/* ========================================================================= */
uLong         adler32(                
    uLong adler,
    const Bytef *buf,
    uInt len)
{
    unsigned long s1 = adler & 0xffff;
    unsigned long s2 = (adler >> 16) & 0xffff;
    int k;

    if (buf == Z_NULL) return 1L;

    while (len > 0) {
        k = len < 5552 ? len : 5552;
        len -= k;
        while (k >= 16) {
            {s1 += buf[0]; s2 += s1;}; {s1 += buf[0+1]; s2 += s1;};; {s1 += buf[0+2]; s2 += s1;}; {s1 += buf[0+2+1]; s2 += s1;};;; {s1 += buf[0+4]; s2 += s1;}; {s1 += buf[0+4+1]; s2 += s1;};; {s1 += buf[0+4+2]; s2 += s1;}; {s1 += buf[0+4+2+1]; s2 += s1;};;;; {s1 += buf[8]; s2 += s1;}; {s1 += buf[8+1]; s2 += s1;};; {s1 += buf[8+2]; s2 += s1;}; {s1 += buf[8+2+1]; s2 += s1;};;; {s1 += buf[8+4]; s2 += s1;}; {s1 += buf[8+4+1]; s2 += s1;};; {s1 += buf[8+4+2]; s2 += s1;}; {s1 += buf[8+4+2+1]; s2 += s1;};;;;;
     buf += 16;
            k -= 16;
        }
        if (k != 0) do {
            s1 += *buf++;
     s2 += s1;
        } while (--k);
        s1 %= 65521L ;
        s2 %= 65521L ;
    }
    return (s2 << 16) | s1;
}






 