//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


void INCLUDEREPLACE(){CX_INCL("AsyncSocketEx.h");}

class CIrcMain;
class CAsyncProxySocketLayer;

class CIrcSocket :        CAsyncSocketEx
{
public:
 CIrcSocket(CIrcMain* pIrcMain);
 virtual ~CIrcSocket();

 int  Create(unsigned int uSocketPort = 0, int iSocketType = SOCK_STREAM,
          long lEvent = FD_READ | FD_WRITE | FD_OOB | FD_ACCEPT | FD_CONNECT | FD_CLOSE,
          const char* lpszSocketAddress = NULL);
 void Connect();
 int SendString(const CString& sMessage);

 virtual void OnConnect(int iErrorCode);
 virtual void OnReceive(int iErrorCode);
 virtual void OnSend(int iErrorCode);
 virtual void OnClose(int iErrorCode);
 virtual void RemoveAllLayers();

protected:
 CAsyncProxySocketLayer* m_pProxyLayer;
 CIrcMain* m_pIrcMain;

 virtual int OnLayerCallback(const CAsyncSocketExLayer* pLayer, int nType, int nCode, int *  wParam, long * lParam);
};






 