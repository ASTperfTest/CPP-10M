

///////////////////////////////////////////////////////////////////////////////
// class CProgressCtrlX
//
// Author:  Yury Goltsman
// email:   ygprg@go.to
// page:    http://go.to/ygprg
// Copyright � 2000, Yury Goltsman
//
// This code provided "AS IS," without warranty of any kind.
// You may freely use or modify this code provided this
// Copyright is included in all derived versions.
//
// version : 1.1
// Added multi-color gradient
// Added filling with brush for background and bar(overrides color settings)
// Added borders attribute
// Added vertical text support
// Added snake mode
// Added reverse mode
// Added dual color for text
// Added text formatting
// Added tied mode for text and rubber bar mode
// Added support for vertical oriented control(PBS_VERTICAL)
//
// version : 1.0
//









// To set text format use "SetTextFormat" and "HideText"





// To set this attributes use or appropriated functions





/////////////////////////////////////////////////////////////////////////////
// class CProgressCtrlX

class /*                     */ CProgressCtrlX :        CProgressCtrl
{
// Construction
public:
 CProgressCtrlX();

// Attributes
public:
 void SetGradientColors(unsigned long clrStart, unsigned long clrEnd) { m_ardwGradColors.SetSize(2); m_ardwGradColors.SetAt(0, clrStart); m_ardwGradColors.SetAt(1, clrEnd); }
 void GetGradientColors(unsigned long& clrStart, unsigned long& clrEnd) { clrStart = m_ardwGradColors[0]; clrEnd = m_ardwGradColors[1]; }

 void SetGradientColorsX(int nCount, unsigned long clrFirst, unsigned long clrNext, ...);
 const CDWordArray& GetGradientColorsX() { return m_ardwGradColors; }

 void SetBarBrush(CBrush* pbrBar) { m_pbrBar = pbrBar; }
 CBrush* GetBarBrush() { return m_pbrBar; }

 void SetBkColor(unsigned long clrBk) { m_clrBk = clrBk; }
 unsigned long GetBkColor() { return m_clrBk; }

 void SetBkBrush(CBrush* pbrBk) { m_pbrBk = pbrBk; }
 CBrush* GetBkBrush() { return m_pbrBk; }

 void SetTextColor(unsigned long clrTextOnBar, unsigned long clrTextOnBk = -1) { m_clrTextOnBar = m_clrTextOnBk = clrTextOnBar; if(clrTextOnBk != -1) m_clrTextOnBk = clrTextOnBk;}
 unsigned long GetTextColor() { return m_clrTextOnBar; }
 unsigned long GetTextColorOnBk() { return m_clrTextOnBk; }

 void SetShowPercent(int  fShowPercent = TRUE) { SetTextFormat(fShowPercent ? _T("%d%%") : NULL, 0x0100          ); }
 int  GetShowPercent() { return GetStyle()&0x0100          ; }

 void SetTextFormat(const char* szFormat, unsigned long ffFormat = 0x0300           );
 void HideText() {SetTextFormat(0);}

 void SetTiedText(int  fTiedText = TRUE) { ModifyStyle(fTiedText ? 0 : 0x1000       , fTiedText ? 0x1000        : 0, SWP_DRAWFRAME); }
 int  GetTiedText() { return GetStyle()&0x1000       ; }

 void SetRubberBar(int  fRubberBar = TRUE) { ModifyStyle(fRubberBar ? 0 : 0x2000        , fRubberBar ? 0x2000         : 0, SWP_DRAWFRAME); }
 int  GetRubberBar() { return GetStyle()&0x2000        ; }

 void SetReverse(int  fReverse = TRUE) { ModifyStyle(fReverse ? 0 : 0x4000     , fReverse ? 0x4000      : 0, SWP_DRAWFRAME); }
 int  GetReverse() { return GetStyle()&0x4000     ; }

 void SetSnake(int  fSnake = TRUE) { ModifyStyle(fSnake ? 0 : 0x8000   |0x2000        , fSnake ? 0x8000   |0x2000         : 0, SWP_DRAWFRAME); }
 int  GetSnake() { return GetStyle()&0x8000   ; }

 void SetSnakeTail(int nTailSize) { m_nTailSize = nTailSize; }
 int  GetSnakeTail() { return m_nTailSize; }

 void SetBorders(const CRect& rcBorders) { m_rcBorders = rcBorders; }
 const CRect& GetBorders() { return m_rcBorders; }

// Operations
public:

// Overrides
 // ClassWizard generated virtual function overrides
 //{{           (CProgressCtrlX)
 //}}           

// Implementation
public:
 virtual ~CProgressCtrlX(){}

protected:
  class CDrawInfo
 {
  CDC *pDC;
  unsigned long dwStyle;
  CRect rcClient;
  int nCurPos;
  int nLower;
  int nUpper;
 };

 virtual void DrawMultiGradient(const CDrawInfo& info, const CRect &rcGrad, const CRect &rcClip);
 virtual void DrawGradient(const CDrawInfo& info, const CRect &rcGrad, const CRect &rcClip, unsigned long clrStart, unsigned long clrEnd);
 virtual void DrawText(const CDrawInfo& info, const CRect &rcMax, const CRect &rcGrad);
 virtual void DrawClippedText(const CDrawInfo& info, const CRect& rcClip, CString& sText, const CPoint& ptWndOrg);
 CRect ConvertToReal(const CDrawInfo& info, const CRect& rcVirt);
 virtual int  SetSnakePos(int& nOldPos, int nNewPos, int  fIncrement = FALSE);

 // color atributes
 CDWordArray m_ardwGradColors;
 CBrush* m_pbrBar;
 unsigned long m_clrBk;
 CBrush* m_pbrBk;
 unsigned long m_clrTextOnBar;
 unsigned long m_clrTextOnBk;

 // snake attributes
 int m_nTail;
 int m_nTailSize;
 int m_nStep;

 CRect m_rcBorders;

 // Generated message map functions
protected:

 //{{       (CProgressCtrlX)
         int  OnEraseBkgnd(CDC* pDC);
         void OnPaint();
         long *  OnSetBarColor(int * , long *);
         long *  OnSetBkColor(int * , long *);
         long *  OnSetPos(int * , long *);
         long *  OnDeltaPos(int * , long *);
         long *  OnStepIt(int * , long *);
         long *  OnSetStep(int * , long *);
 //}}       


};






 