/*
Module : TreeOptionsCtrl.h
Purpose: Defines the interface for an     class to implement a tree options control
         similiar to the advanced tab as seen on the "Internet options" dialog in
         Internet Explorer 4 and later
Created: PJN / 31-03-1999


Copyright (c) 1999 - 2003 by    Naughter.  (Web: www.naughter.com, Email: pjna@naughter.com)

All rights reserved.

Copyright / Usage Details:

You are allowed to include the source code in any
when your product is released in binary form. You are allowed to modify the source code in any way you want
except you cannot modify the copyright details at the top of each module. If you want to distribute source
code with your application, then you are only allowed to distribute versions released by the author. This is
to maintain a single distribution point for the source code.

*/


/////////////////////////////// Defines ///////////////////////////////////////





/////////////////////////////// Includes //////////////////////////////////////



void INCLUDEREPLACE(){CX_INCL("afxdtctl.h");}




/////////////////////////////// Classes ///////////////////////////////////////


//forward declaration
class CTreeOptionsCtrl;
class CTreeOptionsBrowseButton;


//Class which represents a combo box used by the tree options class
class CTreeOptionsCombo :        CComboBox
{
public:
 //Constructors / Destructors
 CTreeOptionsCombo();
 virtual ~CTreeOptionsCombo();

protected:
 //Misc methods
 void SetButtonBuddy(CTreeOptionsBrowseButton* pButton) { m_pButtonCtrl = pButton; };
 void SetTreeBuddy(CTreeOptionsCtrl* pTreeCtrl) { m_pTreeCtrl = pTreeCtrl; };
 void SetTreeItem(HTREEITEM hItem) { m_hTreeCtrlItem = hItem; };
 virtual unsigned long GetWindowStyle();
 virtual int GetDropDownHeight();
 int  IsRelatedWnd(CWnd* pChild);

 //{{           (CTreeOptionsCombo)
 //}}           

 //{{       (CTreeOptionsCombo)
         void OnChar(unsigned int nChar, unsigned int nRepCnt, unsigned int nFlags);
         unsigned int OnGetDlgCode ();
         void OnKillFocus(CWnd* pNewWnd);
 //}}       


 //DECLARE_DYNCREATE(CTreeOptionsCombo)

 //Member variables
 CTreeOptionsCtrl* m_pTreeCtrl;
 CTreeOptionsBrowseButton* m_pButtonCtrl;
 HTREEITEM m_hTreeCtrlItem;
 friend class CTreeOptionsCtrl;
};



//Class which represents a combo box which allows a Font Name to be specified
class CTreeOptionsFontNameCombo :        CTreeOptionsCombo
{
public:
 //Constructors / Destructors
 CTreeOptionsFontNameCombo();
 virtual ~CTreeOptionsFontNameCombo();

protected:
 //{{           (CTreeOptionsFontNameCombo)
 //}}           

 //{{       (CTreeOptionsFontNameCombo)
         int OnCreate(LPCREATESTRUCT lpCreateStruct);
 //}}       


 //DECLARE_DYNCREATE(CTreeOptionsFontNameCombo)

 //Misc Methods
 virtual unsigned long GetWindowStyle();
 int EnumFontProc(const LOGFONT* lplf, const TEXTMETRIC* lptm, unsigned long dwType);
 static int          _EnumFontProc(const LOGFONT* lplf, const TEXTMETRIC* lptm, unsigned long dwType, long * lpData);
};



//Class which represents a combo box which allows a True / False value to be specified
class CTreeOptionsBooleanCombo :        CTreeOptionsCombo
{
public:
 //Constructors / Destructors
 CTreeOptionsBooleanCombo();
 virtual ~CTreeOptionsBooleanCombo();

protected:
 //{{           (CTreeOptionsBooleanCombo)
 //}}           

 //{{       (CTreeOptionsBooleanCombo)
         int OnCreate(LPCREATESTRUCT lpCreateStruct);
 //}}       


 //DECLARE_DYNCREATE(CTreeOptionsBooleanCombo)
};



//forward declaration
class CTreeOptionsBrowseButton;



//Class which represents an edit box used by the tree options class
class CTreeOptionsEdit :        CEdit
{
public:
 //Constructors / Destructors
 CTreeOptionsEdit();
 virtual ~CTreeOptionsEdit();

protected:
 //Misc methods
 void SetTreeBuddy(CTreeOptionsCtrl* pTreeCtrl) { m_pTreeCtrl = pTreeCtrl; };
 void SetButtonBuddy(CTreeOptionsBrowseButton* pButtonCtrl) { m_pButtonCtrl = pButtonCtrl; };
 void SetTreeItem(HTREEITEM hItem) { m_hTreeCtrlItem = hItem; };
 virtual unsigned long GetWindowStyle();
 virtual int GetHeight(int nItemHeight);
 virtual void BrowseForFolder(const CString& sInitialFolder);
 virtual void BrowseForFile(const CString& sInitialFile);
 virtual CString GetBrowseForFolderCaption();
 virtual CString GetBrowseForFileCaption();
 virtual CString GetFileExtensionFilter();

 //{{           (CTreeOptionsEdit)
 //}}           

 //{{       (CTreeOptionsEdit)
         void OnChar(unsigned int nChar, unsigned int nRepCnt, unsigned int nFlags);
         unsigned int OnGetDlgCode ();
         void OnKillFocus(CWnd* pNewWnd);
 //}}       

 static int          SHBrowseSetSelProc(void* hWnd, unsigned int uMsg, long * /*lParam*/, long * lpData);


 //DECLARE_DYNCREATE(CTreeOptionsEdit)

 //Member variables
 CTreeOptionsCtrl* m_pTreeCtrl;
 CTreeOptionsBrowseButton* m_pButtonCtrl;
 HTREEITEM m_hTreeCtrlItem;
 int  m_bDoNotDestroyUponLoseFocus;

 friend class CTreeOptionsCtrl;
 friend class CTreeOptionsBrowseButton;
};



//Class which represents the spin control which can be used in association with an edit box by the tree options class
class CTreeOptionsSpinCtrl :        CSpinButtonCtrl
{
public:
 //Constructors / Destructors
 CTreeOptionsSpinCtrl();
 virtual ~CTreeOptionsSpinCtrl();

protected:
 //Misc methods
 void SetTreeBuddy(CTreeOptionsCtrl* pTreeCtrl);
 void SetEditBuddy(CTreeOptionsEdit* pEdit);
 void SetTreeItem(HTREEITEM hItem) { m_hTreeCtrlItem = hItem; };
 virtual unsigned long GetWindowStyle();
 virtual void GetDefaultRange(int &lower, int& upper);

 //{{           (CTreeOptionsSpinCtrl)
 //}}           

 //{{       (CTreeOptionsSpinCtrl)
         void OnKillFocus(CWnd* pNewWnd);
 //}}       


 //DECLARE_DYNCREATE(CTreeOptionsSpinCtrl)

 //Member variables
 CTreeOptionsCtrl* m_pTreeCtrl;
 HTREEITEM m_hTreeCtrlItem;
 CTreeOptionsEdit* m_pEdit;
 friend class CTreeOptionsCtrl;
};



//Class which represents the browse button which can be used in association with an edit box by the tree options class
class CTreeOptionsBrowseButton :        CButton
{
public:
 //Constructors / Destructors
 CTreeOptionsBrowseButton();
 virtual ~CTreeOptionsBrowseButton();

protected:
 //Misc methods
 void            SetTreeBuddy(CTreeOptionsCtrl* pTreeCtrl);
 void            SetTreeItem(HTREEITEM hItem) { m_hTreeCtrlItem = hItem; };
 void            SetEditBuddy(CTreeOptionsEdit* pEdit);
 void            SetComboBuddy(CTreeOptionsCombo* pCombo);
 virtual unsigned long   GetWindowStyle();
 virtual int     GetWidth();
 virtual CString GetCaption();
 unsigned long        GetColor() const { return m_Color; };
 void            SetColor(unsigned long color);
 void            GetFontItem(LOGFONT* pLogFont);
 void            SetFontItem(const LOGFONT* pLogFont);
 virtual void    BrowseForColor();
 virtual void    BrowseForFont();
 virtual void    BrowseForOpaque();

 //{{           (CTreeOptionsBrowseButton)
 //}}           

 //{{       (CTreeOptionsBrowseButton)
         void OnKillFocus(CWnd* pNewWnd);
         void OnClicked();
 //}}       


 //DECLARE_DYNCREATE(CTreeOptionsBrowseButton)

 //Member variables
 unsigned long m_Color;
 LOGFONT m_Font;
 CTreeOptionsCtrl* m_pTreeCtrl;
 CTreeOptionsEdit* m_pEdit;
 CTreeOptionsCombo* m_pCombo;
 HTREEITEM m_hTreeCtrlItem;
 friend class CTreeOptionsCtrl;
};



//Class which is used for browsing for filenames
class CTreeOptionsFileDialog :        CFileDialog
{
public:
 //Constructors / Destructors
 CTreeOptionsFileDialog(int  bOpenFileDialog, const char* lpszDefExt = NULL, const char* lpszFileName = NULL,
  unsigned long dwFlags = OFN_HIDEREADONLY | OFN_OVERWRITEPROMPT, const char* lpszFilter = NULL, CWnd* pParentWnd = NULL);

protected:
 //DECLARE_DYNAMIC(CTreeOptionsFileDialog)

 virtual void OnInitDone();

 //{{       (CTreeOptionsFileDialog)
 //}}       


};



//Class which represents a date / time control used by the list options class
class CTreeOptionsDateCtrl :        CDateTimeCtrl
{
public:
 //Constructors / Destructors
 CTreeOptionsDateCtrl();
 virtual ~CTreeOptionsDateCtrl();

 //Methods
 virtual CString GetDisplayText(const SYSTEMTIME& st);

protected:
 //Misc methods
 void SetTreeBuddy(CTreeOptionsCtrl* pTreeCtrl) { m_pTreeCtrl = pTreeCtrl; };
 void SetTreeItem(HTREEITEM hItem) { m_hTreeCtrlItem = hItem; };
 virtual unsigned long GetWindowStyle();
 virtual int  IsRelatedWnd(CWnd* pChild);
 void GetDateTime(SYSTEMTIME& st) const { CopyMemory(&st, &m_SystemTime, sizeof(SYSTEMTIME)); };
 void SetDateTime(const SYSTEMTIME& st) { CopyMemory(&m_SystemTime, &st, sizeof(SYSTEMTIME)); };

 //{{           (CTreeOptionsDateCtrl)
 //}}           

 //{{       (CTreeOptionsDateCtrl)
         void OnChar(unsigned int nChar, unsigned int nRepCnt, unsigned int nFlags);
         unsigned int OnGetDlgCode ();
         void OnKillFocus(CWnd* pNewWnd);
 //}}       


 //DECLARE_DYNCREATE(CTreeOptionsDateCtrl)

 //Member variables
 CTreeOptionsCtrl* m_pTreeCtrl;
 HTREEITEM m_hTreeCtrlItem;
 int  m_bDoNotDestroyUponLoseFocus;
 friend class CTreeOptionsCtrl;
 SYSTEMTIME m_SystemTime;
};



//Class which represents a time control used by the list options class
class CTreeOptionsTimeCtrl :        CTreeOptionsDateCtrl
{
public:
 //Constructors / Destructors
 CTreeOptionsTimeCtrl();
 virtual ~CTreeOptionsTimeCtrl();

 //methods
 virtual CString GetDisplayText(const SYSTEMTIME& st);

protected:
 virtual unsigned long GetWindowStyle();

 //{{           (CTreeOptionsTimeCtrl)
 //}}           

 //{{       (CTreeOptionsTimeCtrl)
 //}}       



 //DECLARE_DYNCREATE(CTreeOptionsTimeCtrl)
};



//Class which represents    Address control used by the list options class
class CTreeOptionsIPAddressCtrl :        CIPAddressCtrl
{
public:
 //Constructors / Destructors
 CTreeOptionsIPAddressCtrl();
 virtual ~CTreeOptionsIPAddressCtrl();

 //methods
 virtual CString GetDisplayText(unsigned long dwAddress);

protected:
 //Misc methods
 void SetTreeBuddy(CTreeOptionsCtrl* pTreeCtrl) { m_pTreeCtrl = pTreeCtrl; };
 void SetTreeItem(HTREEITEM hItem) { m_hTreeCtrlItem = hItem; };
 virtual unsigned long GetWindowStyle();
 unsigned long GetIPAddress() const { return m_dwAddress; };
 void SetIPAddress(unsigned long dwAddress) { m_dwAddress = dwAddress; };
 virtual int  IsRelatedWnd(CWnd* pChild);

 //{{           (CTreeOptionsIPAddressCtrl)
 //}}           

 //{{       (CTreeOptionsIPAddressCtrl)
         void OnChar(unsigned int nChar, unsigned int nRepCnt, unsigned int nFlags);
         unsigned int OnGetDlgCode ();
         void OnKillFocus(CWnd* pNewWnd);
 //}}       


 //DECLARE_DYNCREATE(CTreeOptionsIPAddressCtrl)

 //Member variables
 CTreeOptionsCtrl* m_pTreeCtrl;
 HTREEITEM m_hTreeCtrlItem;
 int  m_bDoNotDestroyUponLoseFocus;
 friend class CTreeOptionsCtrl;
 unsigned long m_dwAddress;
};



//Class which is stored in the tree options item data
class CTreeOptionsItemData
{
public:
 //Enums
 enum ControlType
 {
  Unknown,
  Normal,
  Spin,
  FileBrowser,
  FolderBrowser,
  ColorBrowser,
  FontBrowser,
  CheckBox,
  RadioButton,
  ComboBox,
  EditBox,
  DateTimeCtrl,
  IPAddressCtrl,
  OpaqueBrowser,
 };

 //Data
 CRuntimeClass* m_pRuntimeClass1;
 CRuntimeClass* m_pRuntimeClass2;
 ControlType    m_Type;
 unsigned long          m_dwItemData;
 unsigned long       m_Color;
 LOGFONT        m_Font;
 SYSTEMTIME     m_DateTime;
 unsigned long          m_dwIPAddress;
 int            m_bDrawColorForIcon;


 //Methods
 CTreeOptionsItemData()
 {
  m_Type = Unknown;
  m_pRuntimeClass1 = NULL;
  m_pRuntimeClass2 = NULL;
  m_dwItemData = (unsigned long) -1;
  m_Color = RGB(255, 0, 0);
  ZeroMemory(&m_Font, sizeof(LOGFONT));
  ZeroMemory(&m_DateTime, sizeof(SYSTEMTIME));
  m_dwIPAddress = 0;
  m_bDrawColorForIcon = TRUE;
 }
};



//The actual tree options control class
class CTreeOptionsCtrl :        CTreeCtrl
{
public:
 //Constructors / Destructors
 CTreeOptionsCtrl();
 virtual ~CTreeOptionsCtrl();

 //Misc
 void    SetAutoSelect(int  bAutoSelect) { m_bAutoSelect = bAutoSelect; };
 int     GetAutoSelect() const { return m_bAutoSelect; };
 void    SetImageListResourceIDToUse(unsigned int nResourceID) { m_nilID = nResourceID; };
 unsigned int    GetImageListResourceIDToUse() const { return m_nilID; };
 void    SetToggleOverIconOnly(int  bToggle) { m_bToggleOverIconOnly = bToggle; };
 int     GetToggleOverIconOnly() const { return m_bToggleOverIconOnly; };
 unsigned long   GetUserItemData(HTREEITEM hItem) const;
 int     SetUserItemData(HTREEITEM hItem, unsigned long dwData);
 void    SetTextSeparator(const CString& sSeparator) { m_sSeparator = sSeparator; };
 CString GetTextSeparator() const { return m_sSeparator; };
 void    Clear();
 virtual int  DeleteAllItems();

 //Inserting items into the control
 HTREEITEM InsertGroup(const char* lpszItem, int nImage, HTREEITEM hParent = TVI_ROOT, HTREEITEM hAfter = TVI_LAST, unsigned long dwItemData = -1);
 HTREEITEM InsertCheckBox(const char* lpszItem, HTREEITEM hParent, int  bCheck = TRUE, HTREEITEM hAfter = TVI_LAST, unsigned long dwItemData = -1);
 HTREEITEM InsertRadioButton(const char* lpszItem, HTREEITEM hParent, int  bCheck = TRUE, HTREEITEM hAfter = TVI_LAST, unsigned long dwItemData = -1);

 //Validation methods
 int  IsGroup(HTREEITEM hItem) const;
 int  IsCheckBox(HTREEITEM hItem) const;
 int  IsRadioButton(HTREEITEM hItem) const;
 int  IsEditBox(HTREEITEM hItem) const;
 int  IsFileItem(HTREEITEM hItem) const;
 int  IsFolderItem(HTREEITEM hItem) const;
 int  IsColorItem(HTREEITEM hItem) const;
 int  IsFontItem(HTREEITEM hItem) const;
 int  IsDateTimeItem(HTREEITEM hItem) const;
 int  IsIPAddressItem(HTREEITEM hItem) const;
 int  IsOpaqueItem(HTREEITEM hItem) const;

 //Setting / Getting combo states
 int  SetCheckBox(HTREEITEM hItem, int  bCheck);
 int  GetCheckBox(HTREEITEM hItem, int & bCheck) const;

 //Setting / Getting radio states
 virtual int  SetRadioButton(HTREEITEM hParent, int nIndex);
 virtual int  SetRadioButton(HTREEITEM hItem);
 int  GetRadioButton(HTREEITEM hParent, int& nIndex, HTREEITEM& hCheckItem) const;
 int  GetRadioButton(HTREEITEM hItem, int & bCheck) const;

 //Enable / Disbale items
 int  SetGroupEnable(HTREEITEM hItem, int  bEnable);
 int  SetCheckBoxEnable(HTREEITEM hItem, int  bEnable);
 int  SetRadioButtonEnable(HTREEITEM hItem, int  bEnable);
 int  GetRadioButtonEnable(HTREEITEM hItem, int & bEnable) const;
 int  GetCheckBoxEnable(HTREEITEM hItem, int & bEnable) const;

 //Adding a combo box to an item
 int     AddComboBox(HTREEITEM hItem, CRuntimeClass* pRuntimeClass, unsigned long dwItemData = -1);
 CString GetComboText(HTREEITEM hItem) const;
 void    SetComboText(HTREEITEM hItem, const CString& sComboText);

 //Adding an edit to an item
 int     AddEditBox(HTREEITEM hItem, CRuntimeClass* pRuntimeClassEditCtrl, unsigned long dwItemData = -1);
 int     AddEditBox(HTREEITEM hItem, CRuntimeClass* pRuntimeClassEditCtrl, CRuntimeClass* pRuntimeClassSpinCtrl, unsigned long dwItemData = -1);
 CString GetEditText(HTREEITEM hItem) const;
 void    SetEditText(HTREEITEM hItem, const CString& sEditText);

 //Adding a file / Folder edit to an item
 int     AddFileEditBox(HTREEITEM hItem, CRuntimeClass* pRuntimeClassEditCtrl, CRuntimeClass* pRuntimeClassButton, unsigned long dwItemData = -1);
 CString GetFileEditText(HTREEITEM hItem) const;
 void    SetFileEditText(HTREEITEM hItem, const CString& sEditText);
 int     AddFolderEditBox(HTREEITEM hItem, CRuntimeClass* pRuntimeClassEditCtrl, CRuntimeClass* pRuntimeClassButton, unsigned long dwItemData = -1);
 CString GetFolderEditText(HTREEITEM hItem) const;
 void    SetFolderEditText(HTREEITEM hItem, const CString& sEditText);

 //Adding a Color selector to an item
 int      AddColorSelector(HTREEITEM hItem, CRuntimeClass* pRuntimeClassButton, unsigned long dwItemData = -1, int  bDrawColorForIcon = TRUE);
 unsigned long GetColor(HTREEITEM hItem) const;
 void     SetColor(HTREEITEM hItem, unsigned long color);

 //Adding a font name selector to an item
 int      AddFontSelector(HTREEITEM hItem, CRuntimeClass* pRuntimeClassButton, unsigned long dwItemData = -1);
 void     GetFontItem(HTREEITEM hItem, LOGFONT* pLogFont) const;
 void     SetFontItem(HTREEITEM hItem, const LOGFONT* pLogFont);

 //Adding a Date Time  selector to an item
 int      AddDateTime(HTREEITEM hItem, CRuntimeClass* pRuntimeClassDateTime, unsigned long dwItemData = -1);
 void     GetDateTime(HTREEITEM hItem, SYSTEMTIME& st) const;
 void     SetDateTime(HTREEITEM hItem, const SYSTEMTIME& st);

 //Adding an    Address selector to an item
 int      AddIPAddress(HTREEITEM hItem, CRuntimeClass* pRuntimeClassIPAddress, unsigned long dwItemData = -1);
 unsigned long    GetIPAddress(HTREEITEM hItem) const;
 void     SetIPAddress(HTREEITEM hItem, unsigned long dwAddress);

 //Adding a Opaque selector to an item
 int      AddOpaque(HTREEITEM hItem, CRuntimeClass* pRuntimeClass1, CRuntimeClass* pRuntimeClass2, unsigned long dwItemData = -1);
 unsigned long    GetOpaque(HTREEITEM hItem) const;
 void     SetOpaque(HTREEITEM hItem, unsigned long dwItemData);

 //Virtual methods
 virtual void OnCreateImageList();
 virtual           CopyItem(HTREEITEM hItem, HTREEITEM htiNewParent, HTREEITEM htiAfter = TVI_LAST);
 virtual           CopyBranch(HTREEITEM htiBranch, HTREEITEM htiNewParent, HTREEITEM htiAfter = TVI_LAST);

protected:
 //Variables
 CImageList                 m_ilTree;
 unsigned int                       m_nilID;
 CTreeOptionsCombo*         m_pCombo;
 CTreeOptionsEdit*          m_pEdit;
 CTreeOptionsSpinCtrl*      m_pSpin;
 CTreeOptionsBrowseButton*  m_pButton;
 CTreeOptionsDateCtrl*      m_pDateTime;
 CTreeOptionsIPAddressCtrl* m_pIPAddress;
 HTREEITEM                  m_hControlItem;
 int                        m_bToggleOverIconOnly;
 int                        m_bAutoSelect;
 CFont                      m_Font;
 CString                    m_sSeparator;
 int                        m_bBeingCleared;

 //Methods
 virtual void DestroyOldChildControl();
 virtual void RemoveChildControlText(HTREEITEM hItem);
 virtual void CreateNewChildControl(HTREEITEM hItem);
 virtual void CreateSpinCtrl(CRuntimeClass* pRuntimeClassSpinCtrl, CRect rItem, CRect rText, CRect rPrimaryControl);
 virtual void CreateBrowseButton(CRuntimeClass* pRuntimeClassBrowseButton, CRect rItem, CRect rText);
 virtual void UpdateTreeControlValueFromChildControl(HTREEITEM hItem);
 virtual void HandleChildControlLosingFocus();
 virtual void HandleCheckBox(HTREEITEM hItem, int  bCheck);
 virtual int  SetEnabledSemiCheckBox(HTREEITEM hItem, int  bSemi);
 virtual int  GetSemiCheckBox(HTREEITEM hItem, int & bSemi) const;
 virtual int  GetIndentPostion(HTREEITEM hItem) const;
 virtual void MemDeleteAllItems(HTREEITEM hParent);

 //{{           (CTreeOptionsCtrl)
 virtual void PreSubclassWindow();
 //}}           

 //{{       (CTreeOptionsCtrl)
         void OnLButtonDown(unsigned int nFlags, CPoint point);
         void OnChar(unsigned int nChar, unsigned int nRepCnt, unsigned int nFlags);
         void OnDestroy();
         void OnVScroll(unsigned int nSBCode, unsigned int nPos, CScrollBar* pScrollBar);
         void OnHScroll(unsigned int nSBCode, unsigned int nPos, CScrollBar* pScrollBar);
         void OnKeyDown( unsigned int nChar, unsigned int nRepCnt, unsigned int nFlags );
         void OnKillFocus(CWnd* pNewWnd);
 //}}       
         int  OnClick(NMHDR* pNMHDR, long * * pResult);
         int  OnSelchanged(NMHDR* pNMHDR, long * * pResult);
         int  OnDeleteItem(NMHDR* pNMHDR, long * * pResult);
         int  OnMouseWheel(unsigned int nFlags, short zDelta, CPoint pt);
         long *  OnSetFocusToChild(int *  wParam, long * lParam);
         long *  OnRepositionChild(int *  wParam, long * lParam);
         int  OnCustomDraw(NMHDR* pNMHDR, long * * pResult);
         int  OnItemExpanding(NMHDR* pNMHDR, long * * pResult);

 //DECLARE_DYNAMIC(CTreeOptionsCtrl)



 friend class CTreeOptionsEdit;
 friend class CTreeOptionsStatic;
 friend class CTreeOptionsCombo;
 friend class CTreeOptionsSpinCtrl;
 friend class CTreeOptionsBrowseButton;
 friend class CTreeOptionsDateCtrl;
 friend class CTreeOptionsIPAddressCtrl;
};

//Dialog Data exchange support
void DDX_TreeCheck(CDataExchange* pDX, int nIDC, HTREEITEM hItem, int & bCheck);
void DDX_TreeRadio(CDataExchange* pDX, int nIDC, HTREEITEM hParent, int& nIndex);
void DDX_TreeEdit(CDataExchange* pDX, int nIDC, HTREEITEM hItem, CString& sText);
void DDX_TreeEdit(CDataExchange* pDX, int nIDC, HTREEITEM hItem, int& nValue);
void DDX_TreeCombo(CDataExchange* pDX, int nIDC, HTREEITEM hItem, CString& sText);
void DDX_TreeFileEdit(CDataExchange* pDX, int nIDC, HTREEITEM hItem, CString& sText);
void DDX_TreeFolderEdit(CDataExchange* pDX, int nIDC, HTREEITEM hItem, CString& sText);
void DDX_TreeColor(CDataExchange* pDX, int nIDC, HTREEITEM hItem, unsigned long& color);
void DDX_TreeFont(CDataExchange* pDX, int nIDC, HTREEITEM hItem, LOGFONT* pLogFont);
void DDX_TreeBoolean(CDataExchange* pDX, int nIDC, HTREEITEM hItem, int & bValue);
void DDX_TreeDateTime(CDataExchange* pDX, int nIDC, HTREEITEM hItem, SYSTEMTIME& st);
void DDX_TreeIPAddress(CDataExchange* pDX, int nIDC, HTREEITEM hItem, unsigned long& dwAddress);


       //









 