//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("emule.h");}
void INCLUDEREPLACE(){CX_INCL("KademliaWnd.h");}
void INCLUDEREPLACE(){CX_INCL("KadContactListCtrl.h");}
void INCLUDEREPLACE(){CX_INCL("KadContactHistogramCtrl.h");}
void INCLUDEREPLACE(){CX_INCL("KadSearchListCtrl.h");}
void INCLUDEREPLACE(){CX_INCL("Kademlia/Kademlia/kademlia.h");}
void INCLUDEREPLACE(){CX_INCL("Kademlia/Kademlia/prefs.h");}
void INCLUDEREPLACE(){CX_INCL("Kademlia/net/kademliaudplistener.h");}
void INCLUDEREPLACE(){CX_INCL("Ini2.h");}
void INCLUDEREPLACE(){CX_INCL("CustomAutoComplete.h");}
void INCLUDEREPLACE(){CX_INCL("OtherFunctions.h");}
void INCLUDEREPLACE(){CX_INCL("emuledlg.h");}
void INCLUDEREPLACE(){CX_INCL("clientlist.h");}
void INCLUDEREPLACE(){CX_INCL("log.h");}
void INCLUDEREPLACE(){CX_INCL("HttpDownloadDlg.h");}
void INCLUDEREPLACE(){CX_INCL("Kademlia/routing/RoutingZone.h");}
void INCLUDEREPLACE(){CX_INCL("HelpIDs.h");}




static char THIS_FILE[] =  "FILE" ;





// KademliaWnd dialog

//IMPLEMENT_DYNAMIC(CKademliaWnd, CDialog)

/* BEGIN_MESSAGE_MAP(CKademliaWnd, CResizableDialog)
 ON_BN_CLICKED(IDC_BOOTSTRAPBUTTON, OnBnClickedBootstrapbutton)













END_MESSAGE_MAP() */ //)

CKademliaWnd::CKademliaWnd(CWnd* pParent /*=NULL*/)
 : CResizableDialog(CKademliaWnd::IDD, pParent)
{
 m_contactListCtrl = new       CKadContactListCtrl;
 m_contactHistogramCtrl = new       CKadContactHistogramCtrl;
 searchList = new       CKadSearchListCtrl;
 m_pacONBSIPs = NULL;

 icon_kadcont=NULL;
 icon_kadsea=NULL;
}

CKademliaWnd::~CKademliaWnd()
{
 if (m_pacONBSIPs){
  m_pacONBSIPs->Unbind();
  m_pacONBSIPs->Release();
 }
 delete m_contactListCtrl;
 delete m_contactHistogramCtrl;
 delete searchList;

 if (icon_kadcont)
  VERIFY( DestroyIcon(icon_kadcont) );
 if (icon_kadsea)
  VERIFY( DestroyIcon(icon_kadsea) );
}

int  CKademliaWnd::SaveAllSettings()
{
 if (m_pacONBSIPs)
  m_pacONBSIPs->SaveList(thePrefs.GetMuleDirectory(EMULE_CONFIGDIR) + _T("AC_BootstrapIPs.dat")  );

 return TRUE;
}

int  CKademliaWnd::OnInitDialog()
{
 CResizableDialog::OnInitDialog();
 InitWindowStyles(this);
 m_contactListCtrl->Init();
 searchList->Init();
 SetAllIcons();
 Localize();

 AddAnchor(IDC_KADICO1, TOP_LEFT);
 AddAnchor(IDC_CONTACTLIST,TOP_LEFT, CSize(100,50));
 AddAnchor(IDC_KAD_HISTOGRAM,TOP_RIGHT, CSize(100,50));
 AddAnchor(IDC_KADICO2, CSize(0,50));
 AddAnchor(IDC_SEARCHLIST,CSize(0,50),CSize(100,100));
 AddAnchor(IDC_KADCONTACTLAB,TOP_LEFT);
 AddAnchor(IDC_FIREWALLCHECKBUTTON, TOP_RIGHT);
 AddAnchor(IDC_KADCONNECT, TOP_RIGHT);
 AddAnchor(IDC_KADSEARCHLAB,CSize(0,50));
 AddAnchor(IDC_BSSTATIC, TOP_RIGHT);
 AddAnchor(IDC_BOOTSTRAPBUTTON, TOP_RIGHT);
 AddAnchor(IDC_BOOTSTRAPPORT, TOP_RIGHT);
 AddAnchor(IDC_BOOTSTRAPIP, TOP_RIGHT);
 AddAnchor(IDC_BOOTSTRAPURL, TOP_RIGHT);
 AddAnchor(IDC_SSTATIC4, TOP_RIGHT);
 AddAnchor(IDC_SSTATIC7, TOP_RIGHT);
 AddAnchor(IDC_NODESDATLABEL, TOP_RIGHT);
 AddAnchor(IDC_RADCLIENTS, TOP_RIGHT);
 AddAnchor(IDC_RADIP, TOP_RIGHT);
 AddAnchor(IDC_RADNODESURL, TOP_RIGHT);

 searchList->UpdateKadSearchCount();
 m_contactListCtrl->UpdateKadContactCount();

 if (thePrefs.GetUseAutocompletion()){
  m_pacONBSIPs = new       CCustomAutoComplete();
  m_pacONBSIPs->AddRef();
  if (m_pacONBSIPs->Bind(::GetDlgItem(m_hWnd, IDC_BOOTSTRAPIP), ACO_UPDOWNKEYDROPSLIST | ACO_AUTOSUGGEST | ACO_FILTERPREFIXES ))
   m_pacONBSIPs->LoadList(thePrefs.GetMuleDirectory(EMULE_CONFIGDIR) + _T("AC_BootstrapIPs.dat")  );
 }

 CheckDlgButton(IDC_RADCLIENTS,1);

 return true;
}

void CKademliaWnd::DoDataExchange(CDataExchange* pDX)
{
 CResizableDialog::DoDataExchange(pDX);
 DDX_Control(pDX, IDC_CONTACTLIST, *m_contactListCtrl);
 DDX_Control(pDX, IDC_KAD_HISTOGRAM, *m_contactHistogramCtrl);
 DDX_Control(pDX, IDC_SEARCHLIST, *searchList);
 DDX_Control(pDX, IDC_KADCONTACTLAB, kadContactLab);
 DDX_Control(pDX, IDC_KADSEARCHLAB, kadSearchLab);
 DDX_Control(pDX, IDC_BSSTATIC, m_ctrlBootstrap);
}

int  CKademliaWnd::PreTranslateMessage(MSG* pMsg)
{
 if (pMsg->message == WM_KEYDOWN)
 {
  // Don't handle Ctrl+Tab in this window. It will be handled by main window.
  if (pMsg->wParam == VK_TAB && GetAsyncKeyState(VK_CONTROL) < 0)
   return FALSE;
 }

 return CResizableDialog::PreTranslateMessage(pMsg);
}

void CKademliaWnd::OnEnSetfocusBootstrapip()
{
 CheckRadioButton(IDC_RADIP, IDC_RADNODESURL, IDC_RADIP);
 UpdateControlsState();
}

void CKademliaWnd::OnEnSetfocusBootstrapNodesdat()
{
 CheckRadioButton(IDC_RADIP, IDC_RADNODESURL, IDC_RADNODESURL);
 UpdateControlsState();
}

void CKademliaWnd::OnBnClickedBootstrapbutton()
{
 CString strIP;
 uint16 nPort = 0;

 if (IsDlgButtonChecked(IDC_RADIP) != 0)
 {
  GetDlgItem(IDC_BOOTSTRAPIP)->GetWindowText(strIP);
  strIP.Trim();

  //     -handle ip:port
  int iPos;
  if ((iPos = strIP.Find(_T(':'))) != -1)
  {
   GetDlgItem(IDC_BOOTSTRAPPORT)->SetWindowText(strIP.Mid(iPos+1));
   strIP = strIP.Left(iPos);
   GetDlgItem(IDC_BOOTSTRAPIP)->SetWindowText(strIP);
  }

  CString strPort;
  GetDlgItem(IDC_BOOTSTRAPPORT)->GetWindowText(strPort);
  strPort.Trim();
  nPort = (uint16)_ttoi(strPort);

  // invalid IP/Port
  if (strIP.GetLength()<7 || nPort==0)
   return;

  if (m_pacONBSIPs && m_pacONBSIPs->IsBound())
   m_pacONBSIPs->AddItem(strIP + _T(":") + strPort, 0);
  if( !Kademlia::CKademlia::IsRunning() )
  {
   Kademlia::CKademlia::Start();
   theApp.emuledlg->ShowConnectionState();
  }
  // JOHNTODO - Switch between Kad1 and Kad2
  Kademlia::CKademlia::Bootstrap(strIP, nPort, true);
 }
 else if (IsDlgButtonChecked(IDC_RADNODESURL) != 0)
 {
  CString strURL;
  GetDlgItemText(IDC_BOOTSTRAPURL, strURL);
  if (strURL.IsEmpty() || (strURL.Find(_T("://")) == -1)) {
   // not a valid    
   LogError(LOG_STATUSBAR, GetResString(IDS_INVALIDURL) );
   return;
  }
  UpdateNodesDatFromURL(strURL);
 }
 else
 {
  if( !Kademlia::CKademlia::IsRunning() )
  {
   Kademlia::CKademlia::Start();
   theApp.emuledlg->ShowConnectionState();
  }
 }
}

void CKademliaWnd::OnBnClickedFirewallcheckbutton()
{
 Kademlia::CKademlia::RecheckFirewalled();
}

void CKademliaWnd::OnBnConnect()
{
 if (Kademlia::CKademlia::IsConnected())
  Kademlia::CKademlia::Stop();
 else if (Kademlia::CKademlia::IsRunning())
  Kademlia::CKademlia::Stop();
 else
  Kademlia::CKademlia::Start();
 theApp.emuledlg->ShowConnectionState();
}

void CKademliaWnd::OnSysColorChange()
{
 CResizableDialog::OnSysColorChange();
 SetAllIcons();
}

void CKademliaWnd::SetAllIcons()
{
 // frames
 m_ctrlBootstrap.SetIcon(_T("KadBootstrap"));

 if (icon_kadcont)
  VERIFY( DestroyIcon(icon_kadcont) );
 icon_kadcont = theApp.LoadIcon(_T("KadContactList"), 16, 16);
 ((CStatic*)GetDlgItem(IDC_KADICO1))->SetIcon(icon_kadcont);

 if (icon_kadsea)
  VERIFY( DestroyIcon(icon_kadsea) );
 icon_kadsea = theApp.LoadIcon(_T("KadCurrentSearches"), 16, 16);
 ((CStatic*)GetDlgItem(IDC_KADICO2))->SetIcon(icon_kadsea);
}

void CKademliaWnd::Localize()
{
 m_ctrlBootstrap.SetWindowText(GetResString(IDS_BOOTSTRAP));
 GetDlgItem(IDC_BOOTSTRAPBUTTON)->SetWindowText(GetResString(IDS_BOOTSTRAP));
 GetDlgItem(IDC_SSTATIC4)->SetWindowText(GetResString(IDS_SV_ADDRESS) + _T(":"));
 GetDlgItem(IDC_SSTATIC7)->SetWindowText(GetResString(IDS_SV_PORT) + _T(":"));
 GetDlgItem(IDC_NODESDATLABEL)->SetWindowText(GetResString(IDS_BOOTSRAPNODESDAT));
 GetDlgItem(IDC_FIREWALLCHECKBUTTON)->SetWindowText(GetResString(IDS_KAD_RECHECKFW));

 SetDlgItemText(IDC_KADCONTACTLAB,GetResString(IDS_KADCONTACTLAB));
 SetDlgItemText(IDC_KADSEARCHLAB,GetResString(IDS_KADSEARCHLAB));

 SetDlgItemText(IDC_RADCLIENTS,GetResString(IDS_RADCLIENTS));

 UpdateControlsState();
 m_contactHistogramCtrl->Localize();
 m_contactListCtrl->Localize();
 searchList->Localize();
}

void CKademliaWnd::UpdateControlsState()
{
 CString strLabel;
 if (Kademlia::CKademlia::IsConnected())
  strLabel = GetResString(IDS_MAIN_BTN_DISCONNECT);
 else if (Kademlia::CKademlia::IsRunning())
  strLabel = GetResString(IDS_MAIN_BTN_CANCEL);
 else
  strLabel = GetResString(IDS_MAIN_BTN_CONNECT);
 strLabel.Remove(_T('&'));
 GetDlgItem(IDC_KADCONNECT)->SetWindowText(strLabel);

 CString strBootstrapIP;
 GetDlgItemText(IDC_BOOTSTRAPIP, strBootstrapIP);
 CString strBootstrapPort;
 GetDlgItemText(IDC_BOOTSTRAPPORT, strBootstrapPort);
 CString strBootstrapUrl;
 GetDlgItemText(IDC_BOOTSTRAPURL, strBootstrapUrl);

 GetDlgItem(IDC_BOOTSTRAPBUTTON)->EnableWindow(
  !Kademlia::CKademlia::IsConnected()
  && (  (IsDlgButtonChecked(IDC_RADIP)>0 && !strBootstrapIP.IsEmpty()
    && (strBootstrapIP.Find(_T(':')) != -1 || !strBootstrapPort.IsEmpty()))
      || IsDlgButtonChecked(IDC_RADCLIENTS) != 0
   || (IsDlgButtonChecked(IDC_RADNODESURL) != 0 && !strBootstrapUrl.IsEmpty() ))
   );
}

unsigned int CKademliaWnd::GetContactCount() const
{
 return m_contactListCtrl->GetItemCount();
}

void CKademliaWnd::UpdateKadContactCount()
{
 m_contactListCtrl->UpdateKadContactCount();
}

void CKademliaWnd::ShowContacts()
{
 m_contactHistogramCtrl->ShowWindow(SW_SHOW);
 m_contactListCtrl->Visable();
}

void CKademliaWnd::HideContacts()
{
 m_contactHistogramCtrl->ShowWindow(SW_HIDE);
 m_contactListCtrl->Hide();
}

bool CKademliaWnd::ContactAdd(const Kademlia::CContact* contact)
{
 m_contactHistogramCtrl->ContactAdd(contact);
 return m_contactListCtrl->ContactAdd(contact);
}

void CKademliaWnd::ContactRem(const Kademlia::CContact* contact)
{
 m_contactHistogramCtrl->ContactRem(contact);
 m_contactListCtrl->ContactRem(contact);
}

void CKademliaWnd::ContactRef(const Kademlia::CContact* contact)
{
 m_contactListCtrl->ContactRef(contact);
}

void CKademliaWnd::UpdateNodesDatFromURL(CString strURL){
 CString strTempFilename;
 strTempFilename.Format(_T("%stemp-%d-nodes.dat"), thePrefs.GetMuleDirectory(EMULE_CONFIGDIR), ::GetTickCount());

 // try to download nodes.dat
 Log(GetResString(IDS_DOWNLOADING_NODESDAT_FROM), strURL);
 CHttpDownloadDlg dlgDownload;
 dlgDownload.m_strTitle = GetResString(IDS_DOWNLOADING_NODESDAT);
 dlgDownload.m_sURLToDownload = strURL;
 dlgDownload.m_sFileToDownloadInto = strTempFilename;
 if (dlgDownload.DoModal() != IDOK) {
  LogError(LOG_STATUSBAR, GetResString(IDS_ERR_FAILEDDOWNLOADNODES), strURL);
  return;
 }

 if (!Kademlia::CKademlia::IsRunning()){
  Kademlia::CKademlia::Start();
  theApp.emuledlg->ShowConnectionState();
 }
 Kademlia::CKademlia::GetRoutingZone()->ReadFile(strTempFilename);
 (void)_tremove(strTempFilename);
}

int  CKademliaWnd::OnHelpInfo(HELPINFO* /*pHelpInfo*/)
{
 theApp.ShowHelp(eMule_FAQ_GUI_Kad);
 return TRUE;
}

void*  CKademliaWnd::OnCtlColor(CDC* pDC, CWnd* pWnd, unsigned int nCtlColor)
{
 void*  hbr = theApp.emuledlg->GetCtlColor(pDC, pWnd, nCtlColor);
 if (hbr)
  return hbr;
 return __super::OnCtlColor(pDC, pWnd, nCtlColor);
}






 