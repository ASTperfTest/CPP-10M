//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("emule.h");}
void INCLUDEREPLACE(){CX_INCL("ListViewSearchDlg.h");}
void INCLUDEREPLACE(){CX_INCL("OtherFunctions.h");}




static char THIS_FILE[] =  "FILE" ;



//IMPLEMENT_DYNAMIC(CListViewSearchDlg, CDialog)

/* BEGIN_MESSAGE_MAP(CListViewSearchDlg, CDialog)
 ON_EN_CHANGE(IDC_LISTVIEW_SEARCH_TEXT, OnEnChangeSearchText)
END_MESSAGE_MAP() */ //)

CListViewSearchDlg::CListViewSearchDlg(CWnd* pParent /*=NULL*/)
 : CDialog(CListViewSearchDlg::IDD, pParent)
 , m_strFindText(_T(""))
{
 m_pListView = NULL;
 m_iSearchColumn = 0;
 m_icnWnd = NULL;
 m_bCanSearchInAllColumns = true;
}

CListViewSearchDlg::~CListViewSearchDlg()
{
 if (m_icnWnd)
  VERIFY( DestroyIcon(m_icnWnd) );
}

void CListViewSearchDlg::DoDataExchange(CDataExchange* pDX)
{
 CDialog::DoDataExchange(pDX);
 DDX_Control(pDX, IDC_LISTVIEW_SEARCH_COLUMN, m_ctlSearchCol);
 DDX_CBIndex(pDX, IDC_LISTVIEW_SEARCH_COLUMN, m_iSearchColumn);
 DDX_Text(pDX, IDC_LISTVIEW_SEARCH_TEXT, m_strFindText);
}

void CListViewSearchDlg::OnEnChangeSearchText()
{
 UpdateControls();
}

void CListViewSearchDlg::UpdateControls()
{
 GetDlgItem(IDOK)->EnableWindow(GetDlgItem(IDC_LISTVIEW_SEARCH_TEXT)->GetWindowTextLength() > 0);
}

int  CListViewSearchDlg::OnInitDialog()
{
 CDialog::OnInitDialog();
 SetIcon(m_icnWnd = theApp.LoadIcon(_T("Search")), FALSE);
 InitWindowStyles(this);

 SetWindowText(GetResString(IDS_SW_SEARCHBOX));
 SetDlgItemText(IDC_LISTVIEW_SEARCH_TEXT_LBL, GetResString(IDS_SEARCH_TEXT) + _T(':'));
 SetDlgItemText(IDC_LISTVIEW_SEARCH_COLUMN_LBL, GetResString(IDS_SEARCH_COLUMN) + _T(':'));
 SetDlgItemText(IDCANCEL, GetResString(IDS_CANCEL));
 GetDlgItem(IDOK)->SetWindowText(GetResString(IDS_TREEOPTIONS_OK));


 if (!m_bCanSearchInAllColumns)
  m_iSearchColumn = 0;

 if (m_pListView != NULL)
 {
  char  szColTitle[256];
  LVCOLUMN lvc;
  lvc.mask = LVCF_TEXT;
  lvc.cchTextMax = sizeof(szColTitle)/sizeof(szColTitle[0]);
  lvc.pszText = szColTitle;
  int iCol = 0;
  while (m_pListView->GetColumn(iCol++, &lvc))
  {
   m_ctlSearchCol.AddString(lvc.pszText);
   if (!m_bCanSearchInAllColumns)
    break;
  }
  if ((unsigned int)m_iSearchColumn >= (unsigned int)m_ctlSearchCol.GetCount())
   m_iSearchColumn = 0;
 }
 else
 {
  m_ctlSearchCol.EnableWindow(FALSE);
  m_ctlSearchCol.ShowWindow(SW_HIDE);

  m_iSearchColumn = 0;
 }
 m_ctlSearchCol.SetCurSel(m_iSearchColumn);

 UpdateControls();
 return TRUE;
}






 