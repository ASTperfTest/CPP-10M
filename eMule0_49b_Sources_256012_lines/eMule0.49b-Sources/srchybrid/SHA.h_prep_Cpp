/*
 ---------------------------------------------------------------------------
 Copyright (c) 2002, Dr Brian Gladman <brg@gladman.me.uk>, Worcester, UK.
 All rights reserved.

 LICENSE      

 The free distribution and use of this software in both source and binary
 form is provided that:

   1. distributions of this source code include the above copyright
      notice, this list of conditions and the following disclaimer;

   2. distributions in binary form include the above copyright
      notice, this list of conditions and the following disclaimer
      in the documentation and/or other associated materials;

   3. the copyright holder's name is not used to endorse products
      built using this software without specific written permission.

 ALTERNATIVELY, provided that this notice is retained in full, this product
 may be distributed under the terms of the     General Public License (GPL),
 in which case the provisions of the     apply         OF those given above.

 DISCLAIMER

 This software is provided 'as is' with no explicit or implied warranties
 in respect of its properties, including, but not limited to, correctness
 and/or fitness for purpose.
 ---------------------------------------------------------------------------
 Issue Date: 30/11/2002

 This is a byte oriented version of      that operates on arrays of bytes
 stored in memory. It runs at 22 cycles per byte on a Pentium    processor
*/

void INCLUDEREPLACE(){CX_INCL("shahashset.h");}

  class SHA1
{
 unsigned char b[20];
} ;




class CSHA :        CAICHHashAlgo
{
// Construction
public:
 CSHA();
 virtual ~CSHA();

 static bool VerifyImplementation();

// Attributes
protected:
 // NOTE: if you change this, modify the offsets in SHA_ASM.ASM accordingly
 unsigned long m_nCount[2];
 unsigned long m_nHash[5];
 unsigned long m_nBuffer[16];

// Operations
public:
 // CAICHHashAlgo interface
 virtual void Reset();
 virtual void Add(LPCVOID pData, unsigned long nLength);
 virtual void Finish(CAICHHash& Hash);
 virtual void GetHash(CAICHHash& Hash);

 void Finish();
 void GetHash(SHA1* pHash);
 CString GetHashString(int  bURN = FALSE);

 static CString HashToString(const SHA1* pHash, int  bURN = FALSE);
 static CString HashToHexString(const SHA1* pHash, int  bURN = FALSE);
 static int   HashFromString(const char* pszHash, SHA1* pHash);
 static int   HashFromURN(const char* pszHash, SHA1* pHash);
 static int   IsNull(SHA1* pHash);
};

inline bool operator__Equal(const SHA1& sha1a, const SHA1& sha1b)
{
    return memcmp( &sha1a, &sha1b, 20 ) == 0;
}

inline bool operator__NotEqual(const SHA1& sha1a, const SHA1& sha1b)
{
    return memcmp( &sha1a, &sha1b, 20 ) != 0;
}






 