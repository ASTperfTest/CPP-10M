//this file is part of eMule
//Copyright (C)2002-2005 Merkur ( devs@emule-project.net / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("emule.h");}
void INCLUDEREPLACE(){CX_INCL("emuleDlg.h");}
void INCLUDEREPLACE(){CX_INCL("SharedFilesWnd.h");}
void INCLUDEREPLACE(){CX_INCL("OtherFunctions.h");}
void INCLUDEREPLACE(){CX_INCL("SharedFileList.h");}
void INCLUDEREPLACE(){CX_INCL("KnownFileList.h");}
void INCLUDEREPLACE(){CX_INCL("KnownFile.h");}
void INCLUDEREPLACE(){CX_INCL("UserMsgs.h");}
void INCLUDEREPLACE(){CX_INCL("HelpIDs.h");}




static char THIS_FILE[] =  "FILE" ;









// CSharedFilesWnd dialog

//IMPLEMENT_DYNAMIC(CSharedFilesWnd, CDialog)

/* BEGIN_MESSAGE_MAP(CSharedFilesWnd, CResizableDialog)
 ON_BN_CLICKED(IDC_RELOADSHAREDFILES, OnBnClickedReloadSharedFiles)









END_MESSAGE_MAP() */ //)

CSharedFilesWnd::CSharedFilesWnd(CWnd* pParent /*=NULL*/)
 : CResizableDialog(CSharedFilesWnd::IDD, pParent)
{
 icon_files = NULL;
 m_nFilterColumn = 0;
}

CSharedFilesWnd::~CSharedFilesWnd()
{
 m_ctlSharedListHeader.Detach();
 if (icon_files)
  VERIFY( DestroyIcon(icon_files) );
}

void CSharedFilesWnd::DoDataExchange(CDataExchange* pDX)
{
 CResizableDialog::DoDataExchange(pDX);
 DDX_Control(pDX, IDC_SFLIST, sharedfilesctrl);
 DDX_Control(pDX, IDC_POPBAR, pop_bar);
 DDX_Control(pDX, IDC_POPBAR2, pop_baraccept);
 DDX_Control(pDX, IDC_POPBAR3, pop_bartrans);
 DDX_Control(pDX, IDC_STATISTICS, m_ctrlStatisticsFrm);
 DDX_Control(pDX, IDC_SHAREDDIRSTREE, m_ctlSharedDirTree);
 DDX_Control(pDX, IDC_SHAREDFILES_FILTER, m_ctlFilter);
}

int  CSharedFilesWnd::OnInitDialog()
{
 CResizableDialog::OnInitDialog();
 InitWindowStyles(this);
 SetAllIcons();
 sharedfilesctrl.Init();
 m_ctlSharedDirTree.Initalize(&sharedfilesctrl);
 if (thePrefs.GetUseSystemFontForMainControls())
  m_ctlSharedDirTree.SendMessage(WM_SETFONT, NULL, FALSE);

 m_ctlSharedListHeader.Attach(sharedfilesctrl.GetHeaderCtrl()->Detach());
 CArray           aIgnore; // ignored no-text columns for filter edit
 aIgnore.Add(8); // shared parts
 aIgnore.Add(11); // shared ed2k/kad
 m_ctlFilter.OnInit(&m_ctlSharedListHeader, &aIgnore);

 pop_bar.SetGradientColors(RGB(255,255,240),RGB(255,255,0));
 pop_bar.SetTextColor(RGB(20,70,255));
 pop_baraccept.SetGradientColors(RGB(255,255,240),RGB(255,255,0));
 pop_baraccept.SetTextColor(RGB(20,70,255));
 pop_bartrans.SetGradientColors(RGB(255,255,240),RGB(255,255,0));
 pop_bartrans.SetTextColor(RGB(20,70,255));

 CRect rcSpl;
 m_ctlSharedDirTree.GetWindowRect(rcSpl);
 ScreenToClient(rcSpl);
 rcSpl.left = rcSpl.right + 0              ;
 rcSpl.right = rcSpl.left + 4             ;
 m_wndSplitter.Create(WS_CHILD | WS_VISIBLE, rcSpl, this, IDC_SPLITTER_SHAREDFILES);

 AddAnchor(m_wndSplitter, TOP_LEFT);
 AddAnchor(sharedfilesctrl, TOP_LEFT, BOTTOM_RIGHT);
 AddAnchor(m_ctrlStatisticsFrm, BOTTOM_LEFT, BOTTOM_RIGHT);
 AddAnchor(IDC_CURSESSION_LBL, BOTTOM_LEFT);
 AddAnchor(IDC_FSTATIC4, BOTTOM_LEFT);
 AddAnchor(IDC_SREQUESTED, BOTTOM_LEFT);
 AddAnchor(IDC_FSTATIC5, BOTTOM_LEFT);
 AddAnchor(IDC_SACCEPTED, BOTTOM_LEFT);
 AddAnchor(IDC_FSTATIC6, BOTTOM_LEFT);
 AddAnchor(IDC_STRANSFERRED, BOTTOM_LEFT);
 AddAnchor(m_ctlSharedDirTree, TOP_LEFT, BOTTOM_LEFT);
 AddAnchor(pop_bar, BOTTOM_LEFT, BOTTOM_RIGHT);
 AddAnchor(pop_baraccept, BOTTOM_LEFT, BOTTOM_RIGHT);
 AddAnchor(pop_bartrans, BOTTOM_LEFT, BOTTOM_RIGHT);
 AddAnchor(m_ctlFilter, TOP_LEFT);
 AddAnchor(IDC_FILES_ICO, TOP_LEFT);
 AddAnchor(IDC_RELOADSHAREDFILES, TOP_RIGHT);
 AddAnchor(IDC_TOTAL_LBL, BOTTOM_RIGHT);
 AddAnchor(IDC_SREQUESTED2,BOTTOM_RIGHT);
 AddAnchor(IDC_FSTATIC7,BOTTOM_RIGHT);
 AddAnchor(IDC_FSTATIC8,BOTTOM_RIGHT);
 AddAnchor(IDC_FSTATIC9,BOTTOM_RIGHT);
 AddAnchor(IDC_STRANSFERRED2,BOTTOM_RIGHT);
 AddAnchor(IDC_SACCEPTED2,BOTTOM_RIGHT);
 AddAnchor(IDC_TRAFFIC_TEXT, TOP_LEFT);

 int iPosStatInit = rcSpl.left;
 int iPosStatNew = thePrefs.GetSplitterbarPositionShared();
 if (iPosStatNew > 350               )
  iPosStatNew = 350               ;
 else if (iPosStatNew < 100               )
  iPosStatNew = 100               ;
 rcSpl.left = iPosStatNew;
 rcSpl.right = iPosStatNew + 4             ;
 if (iPosStatNew != iPosStatInit)
 {
  m_wndSplitter.MoveWindow(rcSpl);
  DoResize(iPosStatNew - iPosStatInit);
 }

 Localize();

 GetDlgItem(IDC_CURSESSION_LBL)->SetFont(&theApp.m_fontDefaultBold);
 GetDlgItem(IDC_TOTAL_LBL)->SetFont(&theApp.m_fontDefaultBold);

 return TRUE;
}

void CSharedFilesWnd::DoResize(int iDelta)
{
 CSplitterControl::ChangeWidth(&m_ctlSharedDirTree, iDelta);
 CSplitterControl::ChangeWidth(&m_ctlFilter, iDelta);
 CSplitterControl::ChangePos(GetDlgItem(IDC_CURSESSION_LBL), -iDelta, 0);
 CSplitterControl::ChangePos(GetDlgItem(IDC_FSTATIC4), -iDelta, 0);
 CSplitterControl::ChangePos(GetDlgItem(IDC_SREQUESTED), -iDelta, 0);
 CSplitterControl::ChangePos(GetDlgItem(IDC_FSTATIC5), -iDelta, 0);
 CSplitterControl::ChangePos(GetDlgItem(IDC_SACCEPTED), -iDelta, 0);
 CSplitterControl::ChangePos(GetDlgItem(IDC_FSTATIC6), -iDelta, 0);
 CSplitterControl::ChangePos(GetDlgItem(IDC_STRANSFERRED), -iDelta, 0);
 CSplitterControl::ChangePos(&m_ctrlStatisticsFrm, -iDelta, 0);
 CSplitterControl::ChangePos(&sharedfilesctrl, -iDelta, 0);
 CSplitterControl::ChangeWidth(&m_ctrlStatisticsFrm, -iDelta);
 CSplitterControl::ChangeWidth(&sharedfilesctrl, -iDelta);
 CSplitterControl::ChangePos(&pop_bar, -iDelta, 0);
 CSplitterControl::ChangePos(&pop_baraccept, -iDelta, 0);
 CSplitterControl::ChangePos(&pop_bartrans, -iDelta, 0);
 CSplitterControl::ChangeWidth(&pop_bar, -iDelta);
 CSplitterControl::ChangeWidth(&pop_baraccept, -iDelta);
 CSplitterControl::ChangeWidth(&pop_bartrans, -iDelta);

 CRect rcSpl;
 m_wndSplitter.GetWindowRect(rcSpl);
 ScreenToClient(rcSpl);
 thePrefs.SetSplitterbarPositionShared(rcSpl.left);

 RemoveAnchor(m_wndSplitter);
 AddAnchor(m_wndSplitter, TOP_LEFT);
 RemoveAnchor(sharedfilesctrl);
 RemoveAnchor(m_ctrlStatisticsFrm);
 RemoveAnchor(IDC_CURSESSION_LBL);
 RemoveAnchor(IDC_FSTATIC4);
 RemoveAnchor(IDC_SREQUESTED);
 RemoveAnchor(pop_bar);
 RemoveAnchor(IDC_FSTATIC5);
 RemoveAnchor(IDC_SACCEPTED);
 RemoveAnchor(pop_baraccept);
 RemoveAnchor(IDC_FSTATIC6);
 RemoveAnchor(IDC_STRANSFERRED);
 RemoveAnchor(pop_bartrans);
 RemoveAnchor(m_ctlSharedDirTree);
 RemoveAnchor(m_ctlFilter);

 AddAnchor(sharedfilesctrl, TOP_LEFT, BOTTOM_RIGHT);
 AddAnchor(m_ctrlStatisticsFrm, BOTTOM_LEFT, BOTTOM_RIGHT);
 AddAnchor(IDC_CURSESSION_LBL, BOTTOM_LEFT);
 AddAnchor(IDC_FSTATIC4, BOTTOM_LEFT);
 AddAnchor(IDC_SREQUESTED, BOTTOM_LEFT);
 AddAnchor(IDC_FSTATIC5, BOTTOM_LEFT);
 AddAnchor(IDC_SACCEPTED, BOTTOM_LEFT);
 AddAnchor(IDC_FSTATIC6, BOTTOM_LEFT);
 AddAnchor(IDC_STRANSFERRED, BOTTOM_LEFT);
 AddAnchor(m_ctlSharedDirTree, TOP_LEFT, BOTTOM_LEFT);
 AddAnchor(pop_bar, BOTTOM_LEFT, BOTTOM_RIGHT);
 AddAnchor(pop_baraccept, BOTTOM_LEFT, BOTTOM_RIGHT);
 AddAnchor(pop_bartrans, BOTTOM_LEFT, BOTTOM_RIGHT);
 AddAnchor(m_ctlFilter, TOP_LEFT);

 CRect rcWnd;
 GetWindowRect(rcWnd);
 ScreenToClient(rcWnd);
 m_wndSplitter.SetRange(rcWnd.left + 100               , rcWnd.left + 350               );

 Invalidate();
 UpdateWindow();
}


void CSharedFilesWnd::Reload()
{
 sharedfilesctrl.SetDirectoryFilter(NULL, false);
 m_ctlSharedDirTree.Reload();
 sharedfilesctrl.SetDirectoryFilter(m_ctlSharedDirTree.GetSelectedFilter(), false);
 theApp.sharedfiles->Reload();

 ShowSelectedFilesSummary();
}

void CSharedFilesWnd::OnStnDblClickFilesIco()
{
 theApp.emuledlg->ShowPreferences(IDD_PPG_DIRECTORIES);
}

void CSharedFilesWnd::OnBnClickedReloadSharedFiles()
{
 CWaitCursor curWait;
 Reload();
}

void CSharedFilesWnd::OnLvnItemActivateSharedFiles(NMHDR* /*pNMHDR*/, long * * /*pResult*/)
{
 ShowSelectedFilesSummary();
}

void CSharedFilesWnd::ShowSelectedFilesSummary()
{
 const CKnownFile* pTheFile = NULL;
 int iFiles = 0;
 uint64 uTransferred = 0;
 unsigned int uRequests = 0;
 unsigned int uAccepted = 0;
 uint64 uAllTimeTransferred = 0;
 unsigned int uAllTimeRequests = 0;
 unsigned int uAllTimeAccepted = 0;
 POSITION pos = sharedfilesctrl.GetFirstSelectedItemPosition();
 while (pos)
 {
  int iItem = sharedfilesctrl.GetNextSelectedItem(pos);
  const CKnownFile* pFile = (CKnownFile*)sharedfilesctrl.GetItemData(iItem);
  iFiles++;
  if (iFiles == 1)
   pTheFile = pFile;

  uTransferred += pFile->statistic.GetTransferred();
  uRequests += pFile->statistic.GetRequests();
  uAccepted += pFile->statistic.GetAccepts();

  uAllTimeTransferred += pFile->statistic.GetAllTimeTransferred();
  uAllTimeRequests += pFile->statistic.GetAllTimeRequests();
  uAllTimeAccepted += pFile->statistic.GetAllTimeAccepts();
 }

 if (iFiles != 0)
 {
  pop_bartrans.SetRange32(0, (int)(theApp.knownfiles->transferred/1024));
  pop_bartrans.SetPos((int)(uTransferred/1024));
  pop_bartrans.SetShowPercent();
  SetDlgItemText(IDC_STRANSFERRED, CastItoXBytes(uTransferred, false, false));

  pop_bar.SetRange32(0, theApp.knownfiles->requested);
  pop_bar.SetPos(uRequests);
  pop_bar.SetShowPercent();
  SetDlgItemInt(IDC_SREQUESTED, uRequests, FALSE);

  pop_baraccept.SetRange32(0, theApp.knownfiles->accepted);
  pop_baraccept.SetPos(uAccepted);
  pop_baraccept.SetShowPercent();
  SetDlgItemInt(IDC_SACCEPTED, uAccepted, FALSE);

  SetDlgItemText(IDC_STRANSFERRED2, CastItoXBytes(uAllTimeTransferred, false, false));
  SetDlgItemInt(IDC_SREQUESTED2, uAllTimeRequests, FALSE);
  SetDlgItemInt(IDC_SACCEPTED2, uAllTimeAccepted, FALSE);

  CString str(GetResString(IDS_SF_STATISTICS));
  if (iFiles == 1 && pTheFile != NULL)
   str += _T(" (") + MakeStringEscaped(pTheFile->GetFileName()) +_T(")");
  m_ctrlStatisticsFrm.SetWindowText(str);
 }
 else
 {
  pop_bartrans.SetRange32(0, 100);
  pop_bartrans.SetPos(0);
  pop_bartrans.SetTextFormat(_T(""));
  SetDlgItemText(IDC_STRANSFERRED, _T("-"));

  pop_bar.SetRange32(0, 100);
  pop_bar.SetPos(0);
  pop_bar.SetTextFormat(_T(""));
  SetDlgItemText(IDC_SREQUESTED, _T("-"));

  pop_baraccept.SetRange32(0, 100);
  pop_baraccept.SetPos(0);
  pop_baraccept.SetTextFormat(_T(""));
  SetDlgItemText(IDC_SACCEPTED, _T("-"));

  SetDlgItemText(IDC_STRANSFERRED2, _T("-"));
  SetDlgItemText(IDC_SREQUESTED2, _T("-"));
  SetDlgItemText(IDC_SACCEPTED2, _T("-"));

  m_ctrlStatisticsFrm.SetWindowText(GetResString(IDS_SF_STATISTICS));
 }
}

void CSharedFilesWnd::OnNMClickSharedFiles(NMHDR *pNMHDR, long *  *pResult)
{
 OnLvnItemActivateSharedFiles(pNMHDR, pResult);
 *pResult = 0;
}

int  CSharedFilesWnd::PreTranslateMessage(MSG* pMsg)
{
 if (pMsg->message == WM_KEYDOWN)
 {
  // Don't handle Ctrl+Tab in this window. It will be handled by main window.
  if (pMsg->wParam == VK_TAB && GetAsyncKeyState(VK_CONTROL) < 0)
   return FALSE;
  if (pMsg->wParam == VK_ESCAPE)
   return FALSE;
 }
 else if (pMsg->message == WM_KEYUP)
 {
  if (pMsg->hwnd == sharedfilesctrl.m_hWnd)
   OnLvnItemActivateSharedFiles(0, 0);
 }
 else if (!thePrefs.GetStraightWindowStyles() && pMsg->message == WM_MBUTTONUP)
 {
  POINT point;
  ::GetCursorPos(&point);
  CPoint p = point;
  sharedfilesctrl.ScreenToClient(&p);
  int it = sharedfilesctrl.HitTest(p);
  if (it == -1)
   return FALSE;

  sharedfilesctrl.SetItemState(-1, 0, LVIS_SELECTED);
  sharedfilesctrl.SetItemState(it, LVIS_SELECTED | LVIS_FOCUSED, LVIS_SELECTED | LVIS_FOCUSED);
  sharedfilesctrl.SetSelectionMark(it);   // display selection mark correctly!
  sharedfilesctrl.ShowComments((CKnownFile*)sharedfilesctrl.GetItemData(it));
  return TRUE;
 }

 return CResizableDialog::PreTranslateMessage(pMsg);
}

void CSharedFilesWnd::OnSysColorChange()
{
 pop_bar.SetBkColor(GetSysColor(COLOR_3DFACE));
 pop_baraccept.SetBkColor(GetSysColor(COLOR_3DFACE));
 pop_bartrans.SetBkColor(GetSysColor(COLOR_3DFACE));
 CResizableDialog::OnSysColorChange();
 SetAllIcons();
}

void CSharedFilesWnd::SetAllIcons()
{
 m_ctrlStatisticsFrm.SetIcon(_T("StatsDetail"));

 if (icon_files)
  VERIFY( DestroyIcon(icon_files) );
 icon_files = theApp.LoadIcon(_T("SharedFilesList"), 16, 16);
 ((CStatic*)GetDlgItem(IDC_FILES_ICO))->SetIcon(icon_files);
}

void CSharedFilesWnd::Localize()
{
 sharedfilesctrl.Localize();
 m_ctlSharedDirTree.Localize();
 sharedfilesctrl.SetDirectoryFilter(NULL,true);

 GetDlgItem(IDC_TRAFFIC_TEXT)->SetWindowText(GetResString(IDS_SF_FILES));
 GetDlgItem(IDC_RELOADSHAREDFILES)->SetWindowText(GetResString(IDS_SF_RELOAD));
 m_ctrlStatisticsFrm.SetWindowText(GetResString(IDS_SF_STATISTICS));
 GetDlgItem(IDC_CURSESSION_LBL)->SetWindowText(GetResString(IDS_SF_CURRENT));
 GetDlgItem(IDC_TOTAL_LBL)->SetWindowText(GetResString(IDS_SF_TOTAL));
 GetDlgItem(IDC_FSTATIC6)->SetWindowText(GetResString(IDS_SF_TRANS));
 GetDlgItem(IDC_FSTATIC5)->SetWindowText(GetResString(IDS_SF_ACCEPTED));
 GetDlgItem(IDC_FSTATIC4)->SetWindowText(GetResString(IDS_SF_REQUESTS)+_T(":"));
 GetDlgItem(IDC_FSTATIC9)->SetWindowText(GetResString(IDS_SF_TRANS));
 GetDlgItem(IDC_FSTATIC8)->SetWindowText(GetResString(IDS_SF_ACCEPTED));
 GetDlgItem(IDC_FSTATIC7)->SetWindowText(GetResString(IDS_SF_REQUESTS)+_T(":"));
}

void CSharedFilesWnd::OnTvnSelChangedSharedDirsTree(NMHDR* /*pNMHDR*/, long * * pResult)
{
 sharedfilesctrl.SetDirectoryFilter(m_ctlSharedDirTree.GetSelectedFilter(), !m_ctlSharedDirTree.IsCreatingTree());
 *pResult = 0;
}

long *  CSharedFilesWnd::DefWindowProc(unsigned int message, int *  wParam, long * lParam)
{
 switch (message)
 {
  case WM_PAINT:
   if (m_wndSplitter)
   {
    CRect rcWnd;
    GetWindowRect(rcWnd);
    if (rcWnd.Width() > 0)
    {
     CRect rcSpl;
     m_ctlSharedDirTree.GetWindowRect(rcSpl);
     ScreenToClient(rcSpl);
     rcSpl.left = rcSpl.right + 0              ;
     rcSpl.right = rcSpl.left + 4             ;

     CRect rcFilter;
     m_ctlFilter.GetWindowRect(rcFilter);
     ScreenToClient(rcFilter);
     rcSpl.top = rcFilter.top;
     m_wndSplitter.MoveWindow(rcSpl, TRUE);
    }
   }
   break;

  case WM_NOTIFY:
   if (wParam == IDC_SPLITTER_SHAREDFILES)
   {
    SPC_NMHDR* pHdr = (SPC_NMHDR*)lParam;
    DoResize(pHdr->delta);
   }
   break;

  case WM_WINDOWPOSCHANGED: {
   CRect rcWnd;
   GetWindowRect(rcWnd);
   if (m_wndSplitter && rcWnd.Width() > 0)
    Invalidate();
   break;
  }
  case WM_SIZE:
   if (m_wndSplitter)
   {
    CRect rcWnd;
    GetWindowRect(rcWnd);
    ScreenToClient(rcWnd);
    m_wndSplitter.SetRange(rcWnd.left + 100               , rcWnd.left + 350               );
   }
   break;
 }
 return CResizableDialog::DefWindowProc(message, wParam, lParam);
}

void CSharedFilesWnd::OnSize(unsigned int nType, int cx, int cy){
 CResizableDialog::OnSize(nType, cx, cy);
}

long *  CSharedFilesWnd::OnChangeFilter(int *  wParam, long * lParam)
{
 CWaitCursor curWait; // this may take a while

 bool bColumnDiff = (m_nFilterColumn != (uint32)wParam);
 m_nFilterColumn = (uint32)wParam;

 CStringArray astrFilter;
 CString strFullFilterExpr = (const char*)lParam;
 int iPos = 0;
 CString strFilter(strFullFilterExpr.Tokenize(_T(" "), iPos));
 while (!strFilter.IsEmpty()) {
  if (strFilter != _T("-"))
   astrFilter.Add(strFilter);
  strFilter = strFullFilterExpr.Tokenize(_T(" "), iPos);
 }

 bool bFilterDiff = (astrFilter.GetSize() != m_astrFilter.GetSize());
 if (!bFilterDiff) {
  for (int i = 0; i < astrFilter.GetSize(); i++) {
   if (astrFilter[i] != m_astrFilter[i]) {
    bFilterDiff = true;
    break;
   }
  }
 }

 if (!bColumnDiff && !bFilterDiff)
  return 0;
 m_astrFilter.RemoveAll();
 m_astrFilter.Append(astrFilter);

 sharedfilesctrl.ReloadFileList();
 return 0;
}

int  CSharedFilesWnd::OnHelpInfo(HELPINFO* /*pHelpInfo*/)
{
 theApp.ShowHelp(eMule_FAQ_GUI_SharedFiles);
 return TRUE;
}

void*  CSharedFilesWnd::OnCtlColor(CDC* pDC, CWnd* pWnd, unsigned int nCtlColor)
{
 void*  hbr = theApp.emuledlg->GetCtlColor(pDC, pWnd, nCtlColor);
 if (hbr)
  return hbr;
 return __super::OnCtlColor(pDC, pWnd, nCtlColor);
}






 