void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("MD5Sum.h");}




static char THIS_FILE[] =  "FILE" ;



        unsigned char *POINTER = "CX_TYPEDEF";
        unsigned short int UINT2 = "CX_TYPEDEF";
        unsigned long int UINT4 = "CX_TYPEDEF";

  class MD5_CTX {
  UINT4 state[4];
  UINT4 count[2];
  unsigned char buffer[64];
} ;

void MD5Init (MD5_CTX *);
void MD5Update (MD5_CTX *, const unsigned char *, unsigned int);
void MD5Final (unsigned char [16], MD5_CTX *);

MD5Sum::MD5Sum()
{
 memset(m_rawHash, 0, sizeof(m_rawHash));
}

MD5Sum::MD5Sum(const CString& sSource)
{
 Calculate(sSource);
}

MD5Sum::MD5Sum(const unsigned char* pachSource, uint32 nLen)
{
 Calculate(pachSource, nLen);
}

CString MD5Sum::Calculate(const CString& sSource)
{
 return Calculate((const unsigned char*)(const char*)sSource, sSource.GetLength()*sizeof(char ));
}

CString MD5Sum::Calculate(const unsigned char* pachSource, uint32 nLen)
{
 MD5_CTX context;

 MD5Init(&context);
 MD5Update(&context, pachSource, nLen);
 MD5Final(m_rawHash, &context);

 m_sHash.Empty();
 for (int i = 0; i < 16; i++)
 {
  CString sT;
  sT.Format(_T("%02x"), m_rawHash[i]);
  m_sHash += sT;
 }

 return m_sHash;
}

CString MD5Sum::GetHash() const
{
 return m_sHash;
}


















static void MD5Transform (UINT4 [4], const unsigned char [64]);
static void Encode (unsigned char *, const UINT4 *, unsigned int);
static void Decode (UINT4 *, const unsigned char *, unsigned int);
static void MD5_memcpy (POINTER, POINTER, unsigned int);
static void MD5_memset (POINTER, int, unsigned int);

static unsigned char PADDING[64] = {
  0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};

/* F, G, H and   are basic     functions.
 */





/* ROTATE_LEFT rotates x left n bits.
 15-April-2003 Sony: use      intrinsic to save some cycles
 */







/* FF, GG, HH, and    transformations for rounds 1, 2, 3, and 4.
Rotation is separate from addition to prevent recomputation.
 */





















/* MD5 initialization. Begins an     operation, writing a new       context.
 */
void MD5Init (MD5_CTX *context)
{
  context->count[0] = context->count[1] = 0;
  /* Load magic initialization constants.
*/
  context->state[0] = 0x67452301;
  context->state[1] = 0xefcdab89;
  context->state[2] = 0x98badcfe;
  context->state[3] = 0x10325476;
}

/* MD5 block update operation. Continues an     message-digest
  operation, processing another message block, and updating the
  context.
 */
void MD5Update (MD5_CTX *context, const unsigned char *input, unsigned int inputLen)
{
  unsigned int i, index, partLen;

  /* Compute number of bytes mod 64 */
  index = (unsigned int)((context->count[0] >> 3) & 0x3F);

  /* Update number of bits */
  if ((context->count[0] += ((UINT4)inputLen << 3))
   < ((UINT4)inputLen << 3))
 context->count[1]++;
  context->count[1] += ((UINT4)inputLen >> 29);

  partLen = 64 - index;

  /* Transform as many times as possible.
*/
  if (inputLen >= partLen) {
 MD5_memcpy
   ((POINTER)&context->buffer[index], (POINTER)input, partLen);
 MD5Transform (context->state, context->buffer);

 for (i = partLen; i + 63 < inputLen; i += 64)
   MD5Transform (context->state, &input[i]);

 index = 0;
  }
  else
 i = 0;

  /* Buffer remaining input */
  MD5_memcpy
 ((POINTER)&context->buffer[index], (POINTER)&input[i],
  inputLen-i);
}

/* MD5 finalization. Ends an     message-digest operation, writing the
  the message digest and zeroizing the context.
 */
void MD5Final (unsigned char digest[16], MD5_CTX *context)
{
  unsigned char bits[8];
  unsigned int index, padLen;

  /* Save number of bits */
  Encode (bits, context->count, 8);

  /* Pad out to 56 mod 64.
*/
  index = (unsigned int)((context->count[0] >> 3) & 0x3f);
  padLen = (index < 56) ? (56 - index) : (120 - index);
  MD5Update (context, PADDING, padLen);

  /* Append length (before padding) */
  MD5Update (context, bits, 8);
  /* Store state in digest */
  Encode (digest, context->state, 16);

  /* Zeroize sensitive information.
*/
  MD5_memset ((POINTER)context, 0, sizeof (*context));
}

/* MD5 basic transformation. Transforms state based on block.
 */
static void MD5Transform (UINT4 state[4], const unsigned char block[64])
{
  UINT4 a = state[0], b = state[1], c = state[2], d = state[3], x[16];

  Decode (x, block, 64);

  /* Round 1 */
  { (a) += (((( b)) & ( ( c))) | ((~( b)) & ( ( d)))) + ( x[ 0]) + (UINT4)( 0xd76aa478); (a) = _rotl(((a)), ( ( 7  ))); (a) += ( b); }; /* 1 */
  { (d) += (((( a)) & ( ( b))) | ((~( a)) & ( ( c)))) + ( x[ 1]) + (UINT4)( 0xe8c7b756); (d) = _rotl(((d)), ( ( 12 ))); (d) += ( a); }; /* 2 */
  { (c) += (((( d)) & ( ( a))) | ((~( d)) & ( ( b)))) + ( x[ 2]) + (UINT4)( 0x242070db); (c) = _rotl(((c)), ( ( 17 ))); (c) += ( d); }; /* 3 */
  { (b) += (((( c)) & ( ( d))) | ((~( c)) & ( ( a)))) + ( x[ 3]) + (UINT4)( 0xc1bdceee); (b) = _rotl(((b)), ( ( 22 ))); (b) += ( c); }; /* 4 */
  { (a) += (((( b)) & ( ( c))) | ((~( b)) & ( ( d)))) + ( x[ 4]) + (UINT4)( 0xf57c0faf); (a) = _rotl(((a)), ( ( 7  ))); (a) += ( b); }; /* 5 */
  { (d) += (((( a)) & ( ( b))) | ((~( a)) & ( ( c)))) + ( x[ 5]) + (UINT4)( 0x4787c62a); (d) = _rotl(((d)), ( ( 12 ))); (d) += ( a); }; /* 6 */
  { (c) += (((( d)) & ( ( a))) | ((~( d)) & ( ( b)))) + ( x[ 6]) + (UINT4)( 0xa8304613); (c) = _rotl(((c)), ( ( 17 ))); (c) += ( d); }; /* 7 */
  { (b) += (((( c)) & ( ( d))) | ((~( c)) & ( ( a)))) + ( x[ 7]) + (UINT4)( 0xfd469501); (b) = _rotl(((b)), ( ( 22 ))); (b) += ( c); }; /* 8 */
  { (a) += (((( b)) & ( ( c))) | ((~( b)) & ( ( d)))) + ( x[ 8]) + (UINT4)( 0x698098d8); (a) = _rotl(((a)), ( ( 7  ))); (a) += ( b); }; /* 9 */
  { (d) += (((( a)) & ( ( b))) | ((~( a)) & ( ( c)))) + ( x[ 9]) + (UINT4)( 0x8b44f7af); (d) = _rotl(((d)), ( ( 12 ))); (d) += ( a); }; /* 10 */
  { (c) += (((( d)) & ( ( a))) | ((~( d)) & ( ( b)))) + ( x[10]) + (UINT4)( 0xffff5bb1); (c) = _rotl(((c)), ( ( 17 ))); (c) += ( d); }; /* 11 */
  { (b) += (((( c)) & ( ( d))) | ((~( c)) & ( ( a)))) + ( x[11]) + (UINT4)( 0x895cd7be); (b) = _rotl(((b)), ( ( 22 ))); (b) += ( c); }; /* 12 */
  { (a) += (((( b)) & ( ( c))) | ((~( b)) & ( ( d)))) + ( x[12]) + (UINT4)( 0x6b901122); (a) = _rotl(((a)), ( ( 7  ))); (a) += ( b); }; /* 13 */
  { (d) += (((( a)) & ( ( b))) | ((~( a)) & ( ( c)))) + ( x[13]) + (UINT4)( 0xfd987193); (d) = _rotl(((d)), ( ( 12 ))); (d) += ( a); }; /* 14 */
  { (c) += (((( d)) & ( ( a))) | ((~( d)) & ( ( b)))) + ( x[14]) + (UINT4)( 0xa679438e); (c) = _rotl(((c)), ( ( 17 ))); (c) += ( d); }; /* 15 */
  { (b) += (((( c)) & ( ( d))) | ((~( c)) & ( ( a)))) + ( x[15]) + (UINT4)( 0x49b40821); (b) = _rotl(((b)), ( ( 22 ))); (b) += ( c); }; /* 16 */

 /* Round 2 */
  { (a) += (((( b)) & ( ( d))) | (( ( c)) & (~ ( d)))) + ( x[ 1]) + (UINT4)( 0xf61e2562); (a) = _rotl(((a)), ( ( 5  ))); (a) += ( b); }; /* 17 */
  { (d) += (((( a)) & ( ( c))) | (( ( b)) & (~ ( c)))) + ( x[ 6]) + (UINT4)( 0xc040b340); (d) = _rotl(((d)), ( ( 9  ))); (d) += ( a); }; /* 18 */
  { (c) += (((( d)) & ( ( b))) | (( ( a)) & (~ ( b)))) + ( x[11]) + (UINT4)( 0x265e5a51); (c) = _rotl(((c)), ( ( 14 ))); (c) += ( d); }; /* 19 */
  { (b) += (((( c)) & ( ( a))) | (( ( d)) & (~ ( a)))) + ( x[ 0]) + (UINT4)( 0xe9b6c7aa); (b) = _rotl(((b)), ( ( 20 ))); (b) += ( c); }; /* 20 */
  { (a) += (((( b)) & ( ( d))) | (( ( c)) & (~ ( d)))) + ( x[ 5]) + (UINT4)( 0xd62f105d); (a) = _rotl(((a)), ( ( 5  ))); (a) += ( b); }; /* 21 */
  { (d) += (((( a)) & ( ( c))) | (( ( b)) & (~ ( c)))) + ( x[10]) + (UINT4)(  0x2441453); (d) = _rotl(((d)), ( ( 9  ))); (d) += ( a); }; /* 22 */
  { (c) += (((( d)) & ( ( b))) | (( ( a)) & (~ ( b)))) + ( x[15]) + (UINT4)( 0xd8a1e681); (c) = _rotl(((c)), ( ( 14 ))); (c) += ( d); }; /* 23 */
  { (b) += (((( c)) & ( ( a))) | (( ( d)) & (~ ( a)))) + ( x[ 4]) + (UINT4)( 0xe7d3fbc8); (b) = _rotl(((b)), ( ( 20 ))); (b) += ( c); }; /* 24 */
  { (a) += (((( b)) & ( ( d))) | (( ( c)) & (~ ( d)))) + ( x[ 9]) + (UINT4)( 0x21e1cde6); (a) = _rotl(((a)), ( ( 5  ))); (a) += ( b); }; /* 25 */
  { (d) += (((( a)) & ( ( c))) | (( ( b)) & (~ ( c)))) + ( x[14]) + (UINT4)( 0xc33707d6); (d) = _rotl(((d)), ( ( 9  ))); (d) += ( a); }; /* 26 */
  { (c) += (((( d)) & ( ( b))) | (( ( a)) & (~ ( b)))) + ( x[ 3]) + (UINT4)( 0xf4d50d87); (c) = _rotl(((c)), ( ( 14 ))); (c) += ( d); }; /* 27 */
  { (b) += (((( c)) & ( ( a))) | (( ( d)) & (~ ( a)))) + ( x[ 8]) + (UINT4)( 0x455a14ed); (b) = _rotl(((b)), ( ( 20 ))); (b) += ( c); }; /* 28 */
  { (a) += (((( b)) & ( ( d))) | (( ( c)) & (~ ( d)))) + ( x[13]) + (UINT4)( 0xa9e3e905); (a) = _rotl(((a)), ( ( 5  ))); (a) += ( b); }; /* 29 */
  { (d) += (((( a)) & ( ( c))) | (( ( b)) & (~ ( c)))) + ( x[ 2]) + (UINT4)( 0xfcefa3f8); (d) = _rotl(((d)), ( ( 9  ))); (d) += ( a); }; /* 30 */
  { (c) += (((( d)) & ( ( b))) | (( ( a)) & (~ ( b)))) + ( x[ 7]) + (UINT4)( 0x676f02d9); (c) = _rotl(((c)), ( ( 14 ))); (c) += ( d); }; /* 31 */
  { (b) += (((( c)) & ( ( a))) | (( ( d)) & (~ ( a)))) + ( x[12]) + (UINT4)( 0x8d2a4c8a); (b) = _rotl(((b)), ( ( 20 ))); (b) += ( c); }; /* 32 */

  /* Round 3 */
  { (a) += ((( b)) ^ ( ( c)) ^ ( ( d))) + ( x[ 5]) + (UINT4)( 0xfffa3942); (a) = _rotl(((a)), ( ( 4  ))); (a) += ( b); }; /* 33 */
  { (d) += ((( a)) ^ ( ( b)) ^ ( ( c))) + ( x[ 8]) + (UINT4)( 0x8771f681); (d) = _rotl(((d)), ( ( 11 ))); (d) += ( a); }; /* 34 */
  { (c) += ((( d)) ^ ( ( a)) ^ ( ( b))) + ( x[11]) + (UINT4)( 0x6d9d6122); (c) = _rotl(((c)), ( ( 16 ))); (c) += ( d); }; /* 35 */
  { (b) += ((( c)) ^ ( ( d)) ^ ( ( a))) + ( x[14]) + (UINT4)( 0xfde5380c); (b) = _rotl(((b)), ( ( 23 ))); (b) += ( c); }; /* 36 */
  { (a) += ((( b)) ^ ( ( c)) ^ ( ( d))) + ( x[ 1]) + (UINT4)( 0xa4beea44); (a) = _rotl(((a)), ( ( 4  ))); (a) += ( b); }; /* 37 */
  { (d) += ((( a)) ^ ( ( b)) ^ ( ( c))) + ( x[ 4]) + (UINT4)( 0x4bdecfa9); (d) = _rotl(((d)), ( ( 11 ))); (d) += ( a); }; /* 38 */
  { (c) += ((( d)) ^ ( ( a)) ^ ( ( b))) + ( x[ 7]) + (UINT4)( 0xf6bb4b60); (c) = _rotl(((c)), ( ( 16 ))); (c) += ( d); }; /* 39 */
  { (b) += ((( c)) ^ ( ( d)) ^ ( ( a))) + ( x[10]) + (UINT4)( 0xbebfbc70); (b) = _rotl(((b)), ( ( 23 ))); (b) += ( c); }; /* 40 */
  { (a) += ((( b)) ^ ( ( c)) ^ ( ( d))) + ( x[13]) + (UINT4)( 0x289b7ec6); (a) = _rotl(((a)), ( ( 4  ))); (a) += ( b); }; /* 41 */
  { (d) += ((( a)) ^ ( ( b)) ^ ( ( c))) + ( x[ 0]) + (UINT4)( 0xeaa127fa); (d) = _rotl(((d)), ( ( 11 ))); (d) += ( a); }; /* 42 */
  { (c) += ((( d)) ^ ( ( a)) ^ ( ( b))) + ( x[ 3]) + (UINT4)( 0xd4ef3085); (c) = _rotl(((c)), ( ( 16 ))); (c) += ( d); }; /* 43 */
  { (b) += ((( c)) ^ ( ( d)) ^ ( ( a))) + ( x[ 6]) + (UINT4)(  0x4881d05); (b) = _rotl(((b)), ( ( 23 ))); (b) += ( c); }; /* 44 */
  { (a) += ((( b)) ^ ( ( c)) ^ ( ( d))) + ( x[ 9]) + (UINT4)( 0xd9d4d039); (a) = _rotl(((a)), ( ( 4  ))); (a) += ( b); }; /* 45 */
  { (d) += ((( a)) ^ ( ( b)) ^ ( ( c))) + ( x[12]) + (UINT4)( 0xe6db99e5); (d) = _rotl(((d)), ( ( 11 ))); (d) += ( a); }; /* 46 */
  { (c) += ((( d)) ^ ( ( a)) ^ ( ( b))) + ( x[15]) + (UINT4)( 0x1fa27cf8); (c) = _rotl(((c)), ( ( 16 ))); (c) += ( d); }; /* 47 */
  { (b) += ((( c)) ^ ( ( d)) ^ ( ( a))) + ( x[ 2]) + (UINT4)( 0xc4ac5665); (b) = _rotl(((b)), ( ( 23 ))); (b) += ( c); }; /* 48 */

  /* Round 4 */
  { (a) += (( ( c)) ^ ((( b)) | (~ ( d)))) + ( x[ 0]) + (UINT4)( 0xf4292244); (a) = _rotl(((a)), ( ( 6  ))); (a) += ( b); }; /* 49 */
  { (d) += (( ( b)) ^ ((( a)) | (~ ( c)))) + ( x[ 7]) + (UINT4)( 0x432aff97); (d) = _rotl(((d)), ( ( 10 ))); (d) += ( a); }; /* 50 */
  { (c) += (( ( a)) ^ ((( d)) | (~ ( b)))) + ( x[14]) + (UINT4)( 0xab9423a7); (c) = _rotl(((c)), ( ( 15 ))); (c) += ( d); }; /* 51 */
  { (b) += (( ( d)) ^ ((( c)) | (~ ( a)))) + ( x[ 5]) + (UINT4)( 0xfc93a039); (b) = _rotl(((b)), ( ( 21 ))); (b) += ( c); }; /* 52 */
  { (a) += (( ( c)) ^ ((( b)) | (~ ( d)))) + ( x[12]) + (UINT4)( 0x655b59c3); (a) = _rotl(((a)), ( ( 6  ))); (a) += ( b); }; /* 53 */
  { (d) += (( ( b)) ^ ((( a)) | (~ ( c)))) + ( x[ 3]) + (UINT4)( 0x8f0ccc92); (d) = _rotl(((d)), ( ( 10 ))); (d) += ( a); }; /* 54 */
  { (c) += (( ( a)) ^ ((( d)) | (~ ( b)))) + ( x[10]) + (UINT4)( 0xffeff47d); (c) = _rotl(((c)), ( ( 15 ))); (c) += ( d); }; /* 55 */
  { (b) += (( ( d)) ^ ((( c)) | (~ ( a)))) + ( x[ 1]) + (UINT4)( 0x85845dd1); (b) = _rotl(((b)), ( ( 21 ))); (b) += ( c); }; /* 56 */
  { (a) += (( ( c)) ^ ((( b)) | (~ ( d)))) + ( x[ 8]) + (UINT4)( 0x6fa87e4f); (a) = _rotl(((a)), ( ( 6  ))); (a) += ( b); }; /* 57 */
  { (d) += (( ( b)) ^ ((( a)) | (~ ( c)))) + ( x[15]) + (UINT4)( 0xfe2ce6e0); (d) = _rotl(((d)), ( ( 10 ))); (d) += ( a); }; /* 58 */
  { (c) += (( ( a)) ^ ((( d)) | (~ ( b)))) + ( x[ 6]) + (UINT4)( 0xa3014314); (c) = _rotl(((c)), ( ( 15 ))); (c) += ( d); }; /* 59 */
  { (b) += (( ( d)) ^ ((( c)) | (~ ( a)))) + ( x[13]) + (UINT4)( 0x4e0811a1); (b) = _rotl(((b)), ( ( 21 ))); (b) += ( c); }; /* 60 */
  { (a) += (( ( c)) ^ ((( b)) | (~ ( d)))) + ( x[ 4]) + (UINT4)( 0xf7537e82); (a) = _rotl(((a)), ( ( 6  ))); (a) += ( b); }; /* 61 */
  { (d) += (( ( b)) ^ ((( a)) | (~ ( c)))) + ( x[11]) + (UINT4)( 0xbd3af235); (d) = _rotl(((d)), ( ( 10 ))); (d) += ( a); }; /* 62 */
  { (c) += (( ( a)) ^ ((( d)) | (~ ( b)))) + ( x[ 2]) + (UINT4)( 0x2ad7d2bb); (c) = _rotl(((c)), ( ( 15 ))); (c) += ( d); }; /* 63 */
  { (b) += (( ( d)) ^ ((( c)) | (~ ( a)))) + ( x[ 9]) + (UINT4)( 0xeb86d391); (b) = _rotl(((b)), ( ( 21 ))); (b) += ( c); }; /* 64 */

  state[0] += a;
  state[1] += b;
  state[2] += c;
  state[3] += d;

  /* Zeroize sensitive information.
*/
  MD5_memset ((POINTER)x, 0, sizeof (x));
}

/* Encodes into output (unsigned char). Assumes len is
  a multiple of 4.
 */
static void Encode (unsigned char *output, const UINT4 *input, unsigned int len)
{
  unsigned int i, j;

  for (i = 0, j = 0; j < len; i++, j += 4) {
 output[j] = (unsigned char)(input[i] & 0xff);
 output[j+1] = (unsigned char)((input[i] >> 8) & 0xff);
 output[j+2] = (unsigned char)((input[i] >> 16) & 0xff);
 output[j+3] = (unsigned char)((input[i] >> 24) & 0xff);
  }
}

/* Decodes into output (UINT4). Assumes len is
  a multiple of 4.
 */
static void Decode (UINT4 *output, const unsigned char *input, unsigned int len)
{
  unsigned int i, j;

  for (i = 0, j = 0; j < len; i++, j += 4)
 output[i] = ((UINT4)input[j]) | (((UINT4)input[j+1]) << 8) |
   (((UINT4)input[j+2]) << 16) | (((UINT4)input[j+3]) << 24);
}

/* Note: Replace "for loop" with standard memcpy if possible.
 */

static void MD5_memcpy (POINTER output, POINTER input, unsigned int len)
{
  unsigned int i;

  for (i = 0; i < len; i++)
 output[i] = input[i];
}

/* Note: Replace "for loop" with standard memset if possible.
 */
static void MD5_memset (POINTER output, int value, unsigned int len)
{
  unsigned int i;

  for (i = 0; i < len; i++)
 ((char *)output)[i] = (char)value;
}






 