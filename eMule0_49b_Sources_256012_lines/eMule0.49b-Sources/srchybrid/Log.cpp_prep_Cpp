//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("io.h");}
void INCLUDEREPLACE(){CX_INCL("share.h");}
void INCLUDEREPLACE(){CX_INCL("emule.h");}
void INCLUDEREPLACE(){CX_INCL("Log.h");}
void INCLUDEREPLACE(){CX_INCL("OtherFunctions.h");}
void INCLUDEREPLACE(){CX_INCL("Preferences.h");}
void INCLUDEREPLACE(){CX_INCL("emuledlg.h");}
void INCLUDEREPLACE(){CX_INCL("StringConversion.h");}




static char THIS_FILE[] =  "FILE" ;



void LogV(unsigned int uFlags, const char* pszFmt, va_list argp)
{
 AddLogTextV(uFlags, DLP_DEFAULT, pszFmt, argp);
}

///////////////////////////////////////////////////////////////////////////////
//

void Log(const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(LOG_DEFAULT, pszFmt, argp);
 va_end(argp);
}

void LogError(const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(LOG_ERROR, pszFmt, argp);
 va_end(argp);
}

void LogWarning(const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(LOG_WARNING, pszFmt, argp);
 va_end(argp);
}

///////////////////////////////////////////////////////////////////////////////
//

void Log(unsigned int uFlags, const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(uFlags, pszFmt, argp);
 va_end(argp);
}

void LogError(unsigned int uFlags, const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(uFlags | LOG_ERROR, pszFmt, argp);
 va_end(argp);
}

void LogWarning(unsigned int uFlags, const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(uFlags | LOG_WARNING, pszFmt, argp);
 va_end(argp);
}

///////////////////////////////////////////////////////////////////////////////
//

void DebugLog(const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(LOG_DEBUG, pszFmt, argp);
 va_end(argp);
}

void DebugLogError(const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(LOG_DEBUG | LOG_ERROR, pszFmt, argp);
 va_end(argp);
}

void DebugLogWarning(const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(LOG_DEBUG | LOG_WARNING, pszFmt, argp);
 va_end(argp);
}

///////////////////////////////////////////////////////////////////////////////
//

void DebugLog(unsigned int uFlags, const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(uFlags | LOG_DEBUG, pszFmt, argp);
 va_end(argp);
}

void DebugLogError(unsigned int uFlags, const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(uFlags | LOG_DEBUG | LOG_ERROR, pszFmt, argp);
 va_end(argp);
}

void DebugLogWarning(unsigned int uFlags, const char* pszFmt, ...)
{
 va_list argp;
 va_start(argp, pszFmt);
 LogV(uFlags | LOG_DEBUG | LOG_WARNING, pszFmt, argp);
 va_end(argp);
}


///////////////////////////////////////////////////////////////////////////////
//

void AddLogLine(bool bAddToStatusBar, const char* pszLine, ...)
{
 ASSERT(pszLine != NULL);

 va_list argptr;
 va_start(argptr, pszLine);
 AddLogTextV(LOG_DEFAULT | (bAddToStatusBar ? LOG_STATUSBAR : 0), DLP_DEFAULT, pszLine, argptr);
 va_end(argptr);
}

void AddDebugLogLine(bool bAddToStatusBar, const char* pszLine, ...)
{
 ASSERT(pszLine != NULL);

 va_list argptr;
 va_start(argptr, pszLine);
 AddLogTextV(LOG_DEBUG | (bAddToStatusBar ? LOG_STATUSBAR : 0), DLP_DEFAULT, pszLine, argptr);
 va_end(argptr);
}

void AddDebugLogLine(EDebugLogPriority Priority, bool bAddToStatusBar, const char* pszLine, ...)
{
 // loglevel needs to be merged with             and           later
 // (which only means 3 instead of 5 levels which you can select in the preferences)
 // makes no sense to implement two different priority indicators
 //
 // untill there is some time todo this, It will convert              to ERRORs
 // and          to             in order to be able using the Loglevel and color indicator
 ASSERT(pszLine != NULL);

 va_list argptr;
 va_start(argptr, pszLine);
 uint32 nFlag = 0;
 if (Priority == DLP_VERYHIGH)
  nFlag = LOG_ERROR;
 else if (Priority == DLP_HIGH)
  nFlag = LOG_WARNING;

 AddLogTextV(LOG_DEBUG | nFlag | (bAddToStatusBar ? LOG_STATUSBAR : 0), Priority, pszLine, argptr);
 va_end(argptr);
}

void AddLogTextV(unsigned int uFlags, EDebugLogPriority dlpPriority, const char* pszLine, va_list argptr)
{
 ASSERT(pszLine != NULL);

 if ((uFlags & LOG_DEBUG) && !(thePrefs.GetVerbose() && dlpPriority >= thePrefs.GetVerboseLogPriority()))
  return;

 char  szLogLine[1000];
 _vsntprintf(szLogLine, _countof(szLogLine), pszLine, argptr);
 szLogLine[_countof(szLogLine) - 1] = _T('\0');

 if (theApp.emuledlg)
  theApp.emuledlg->AddLogText(uFlags, szLogLine);
 else
 {
  TRACE(_T("App Log: %s\n"), szLogLine);

  char  szFullLogLine[1060];
  int iLen = _sntprintf(szFullLogLine, _countof(szFullLogLine), _T("%s: %s\r\n"), CTime::GetCurrentTime().Format(thePrefs.GetDateTimeFormat4Log()), szLogLine);
  if (iLen > 0)
  {
   if (!(uFlags & LOG_DEBUG))
   {
    if (thePrefs.GetLog2Disk())
     theLog.Log(szFullLogLine, iLen);
   }

   if (thePrefs.GetVerbose() && ((uFlags & LOG_DEBUG) || thePrefs.GetFullVerbose()))
   {
    if (thePrefs.GetDebug2Disk())
     theVerboseLog.Log(szFullLogLine, iLen);
   }
  }
 }
}


///////////////////////////////////////////////////////////////////////////////
// CLogFile

CLogFile::CLogFile()
{
 (void)m_strFilePath;
 m_uMaxFileSize = (unsigned int)-1;
 m_uBytesWritten = 0;
 m_tStarted = 0;
 m_fp = NULL;
 m_bInOpenCall = false;
 ASSERT( Unicode == 0 );
 m_eFileFormat = Unicode;
}

CLogFile::~CLogFile()
{
 Close();
}

const CString& CLogFile::GetFilePath() const
{
 return m_strFilePath;
}

bool CLogFile::SetFilePath(const char* pszFilePath)
{
 if (IsOpen())
  return false;
 m_strFilePath = pszFilePath;
 return true;
}

void CLogFile::SetMaxFileSize(unsigned int uMaxFileSize)
{
 if (uMaxFileSize == 0)
  uMaxFileSize = (unsigned int)-1;
 else if (uMaxFileSize < 0x10000)
  uMaxFileSize = 0x10000;
 m_uMaxFileSize = uMaxFileSize;
}

bool CLogFile::SetFileFormat(ELogFileFormat eFileFormat)
{
 if (eFileFormat != Unicode && eFileFormat != Utf8){
  ASSERT(0);
  return false;
 }
 if (m_fp != NULL)
  return false; // can't change file format on-the-fly
 m_eFileFormat = eFileFormat;
 return true;
}

bool CLogFile::IsOpen() const
{
 return m_fp != NULL;
}

bool CLogFile::Create(const char* pszFilePath, unsigned int uMaxFileSize, ELogFileFormat eFileFormat)
{
 Close();
 m_strFilePath = pszFilePath;
 m_uMaxFileSize = uMaxFileSize;
 m_eFileFormat = eFileFormat;
 return Open();
}

bool CLogFile::Open()
{
 if (m_fp != NULL)
  return true;

 m_fp = _tfsopen(m_strFilePath, _T("a+b"), _SH_DENYWR);
 if (m_fp != NULL)
 {
  m_tStarted = time(NULL);
  m_uBytesWritten = _filelength(_fileno(m_fp));
  if (m_uBytesWritten == 0)
  {
   if (m_eFileFormat == Unicode)
   {
    // write Unicode byte-order mark 0xFEFF
    fputwc(0xFEFF, m_fp);
   }
   else
   {
    ASSERT( m_eFileFormat == Utf8 );
    ; // could write UTF-8 header..
   }
  }
  else if (m_uBytesWritten >= sizeof(unsigned short))
  {
   // check for Unicode byte-order mark 0xFEFF
   unsigned short wBOM;
   if (fread(&wBOM, sizeof(wBOM), 1, m_fp) == 1)
   {
    if (wBOM == 0xFEFF && m_eFileFormat == Unicode)
    {
     // log file already in Unicode
fseek(m_fp, 0, SEEK_END); // actually not needed because file is opened in 'Append' mode..
    }
    else if (wBOM != 0xFEFF && m_eFileFormat != Unicode)
    {
     // log file already in UTF-8
fseek(m_fp, 0, SEEK_END); // actually not needed because file is opened in 'Append' mode..
    }
    else
    {
     // log file does not have the required format, create a new
     ASSERT( (m_eFileFormat==Unicode && wBOM!=0xFEFF) || (m_eFileFormat==Utf8 && wBOM==0xFEFF) );

     ASSERT( !m_bInOpenCall );
     if (!m_bInOpenCall) // just for safety
     {
      m_bInOpenCall = true;
      StartNewLogFile();
      m_bInOpenCall = false;
     }
    }
   }
  }
 }
 return m_fp != NULL;
}

bool CLogFile::Close()
{
 if (m_fp == NULL)
  return true;
 bool bResult = (fclose(m_fp) == 0);
 m_fp = NULL;
 m_tStarted = 0;
 m_uBytesWritten = 0;
 return bResult;
}

bool CLogFile::Log(const char* pszMsg, int iLen)
{
 if (m_fp == NULL)
  return false;

 size_t uWritten;
 if (m_eFileFormat == Unicode)
 {
  // don't use 'fputs' + '_filelength' -- gives poor performance
  size_t uToWrite = ((iLen == -1) ? _tcslen(pszMsg) : (size_t)iLen)*sizeof(char );
  uWritten = fwrite(pszMsg, 1, uToWrite, m_fp);
 }
 else
 {
  TUnicodeToUTF8<2048> utf8(pszMsg, iLen);
  uWritten = fwrite((const char*)utf8, 1, utf8.GetLength(), m_fp);
 }
 bool bResult = !ferror(m_fp);
 m_uBytesWritten += uWritten;

 if (m_uBytesWritten >= m_uMaxFileSize)
  StartNewLogFile();
 else
  fflush(m_fp);

 return bResult;
}

bool CLogFile::Logf(const char* pszFmt, ...)
{
 if (m_fp == NULL)
  return false;

 va_list argp;
 va_start(argp, pszFmt);

 char  szMsg[1024];
 _vsntprintf(szMsg, _countof(szMsg), pszFmt, argp);
 szMsg[_countof(szMsg) - 1] = _T('\0');

 char  szFullMsg[1060];
 int iLen = _sntprintf(szFullMsg, _countof(szFullMsg), _T("%s: %s\r\n"), CTime::GetCurrentTime().Format(thePrefs.GetDateTimeFormat4Log()), szMsg);
 if (iLen <= 0)
  return false;
 va_end(argp);
 return Log(szFullMsg, iLen);
}

void CLogFile::StartNewLogFile()
{
 time_t tStarted = m_tStarted;
 Close();

 char  szDateLogStarted[40];
 _tcsftime(szDateLogStarted, _countof(szDateLogStarted), _T("%Y.%m.%d %H.%M.% "), localtime(&tStarted));

 char  szDrv[_MAX_DRIVE];
 char  szDir[_MAX_DIR];
 char  szNam[_MAX_FNAME];
 char  szExt[_MAX_EXT];
 _tsplitpath(m_strFilePath, szDrv, szDir, szNam, szExt);

 CString strLogBakNam;
 strLogBakNam = szNam;
 strLogBakNam += _T(" - ");
 strLogBakNam += szDateLogStarted;

 char  szLogBakFilePath[MAX_PATH];
 _tmakepathlimit(szLogBakFilePath, szDrv, szDir, strLogBakNam, szExt);

 if (_trename(m_strFilePath, szLogBakFilePath) != 0)
  VERIFY( _tremove(m_strFilePath) == 0 );

 Open();
}






 