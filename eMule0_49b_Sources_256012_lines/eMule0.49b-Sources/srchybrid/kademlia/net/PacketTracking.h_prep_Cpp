//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


void INCLUDEREPLACE(){CX_INCL("../utils/UInt128.h");}

namespace Kademlia
{
  class TrackPackets_Struct{
  uint32 dwIP;
  uint32 dwInserted;
  uint8  byOpcode;
 };

  class TrackChallenge_Struct{
  uint32 uIP;
  uint32 dwInserted;
  uint8  byOpcode;
  CUInt128 uContactID;
  CUInt128 uChallenge;
 };

  class TrackPacketsIn_Struct{
   class TrackedRequestIn_Struct{
   uint32 m_nCount;
   uint32 m_dwFirstAdded;
   uint8 m_byOpcode;
   bool m_bDbgLogged;
  };

  TrackPacketsIn_Struct() { m_dwLastExpire = 0; m_uIP = 0; }

  uint32 m_uIP;
  uint32 m_dwLastExpire;
  CArray                                                    m_aTrackedRequests;
 };

 class CPacketTracking
 {
  public:
   CPacketTracking();
   virtual ~CPacketTracking();

  protected:
   void AddTrackedOutPacket(uint32 dwIP, uint8 byOpcode);
   bool IsOnOutTrackList(uint32 dwIP, uint8 byOpcode, bool bDontRemove = false);
   bool InTrackListIsAllowedPacket(uint32 uIP, uint8 byOpcode, bool bValidReceiverkey);
   void InTrackListCleanup();
   void AddLegacyChallenge(CUInt128 uContactID, CUInt128 uChallengeID, uint32 uIP, uint8 byOpcode);
   bool IsLegacyChallenge(CUInt128 uChallengeID, uint32 uIP, uint8 byOpcode, CUInt128& ruContactID);
   bool HasActiveLegacyChallenge(uint32 uIP) const;

  private:
   bool IsTrackedOutListRequestPacket(uint8 byOpcode) const;
   CList                      listTrackedRequests;
   CList                        listChallengeRequests;
   CTypedPtrList                                       m_liTrackPacketsIn;
   CMap                                                           m_mapTrackPacketsIn;
   uint32 dwLastTrackInCleanup;
 };
}





 