//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE. See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("SafeFile.h");}
void INCLUDEREPLACE(){CX_INCL("Packets.h");}
void INCLUDEREPLACE(){CX_INCL("StringConversion.h");}
void INCLUDEREPLACE(){CX_INCL("kademlia/utils/UInt128.h");}
void INCLUDEREPLACE(){CX_INCL("atlenc.h");}




static char THIS_FILE[] =  "FILE" ;



///////////////////////////////////////////////////////////////////////////////
// CFileDataIO

uint8 CFileDataIO::ReadUInt8()
{
 uint8 nVal;
 Read(&nVal, sizeof nVal);
 return nVal;
}

uint16 CFileDataIO::ReadUInt16()
{
 uint16 nVal;
 Read(&nVal, sizeof nVal);
 return nVal;
}

uint32 CFileDataIO::ReadUInt32()
{
 uint32 nVal;
 Read(&nVal, sizeof nVal);
 return nVal;
}

uint64 CFileDataIO::ReadUInt64()
{
 uint64 nVal;
 Read(&nVal, sizeof nVal);
 return nVal;
}

void CFileDataIO::ReadUInt128(Kademlia::CUInt128 *pVal)
{
 Read(pVal->GetDataPtr(), 16);
}

void CFileDataIO::ReadHash16(uchar* pVal)
{
 Read(pVal, 16);
}

CString CFileDataIO::ReadString(bool bOptUTF8, unsigned int uRawSize)
{
 const unsigned int uMaxShortRawSize = SHORT_RAW_ED2K_UTF8_STR;
 if (uRawSize <= uMaxShortRawSize)
 {
  char acRaw[uMaxShortRawSize];
  Read(acRaw, uRawSize);
  if (uRawSize >= 3 && (UCHAR)acRaw[0] == 0xEFU && (UCHAR)acRaw[1] == 0xBBU && (UCHAR)acRaw[2] == 0xBFU)
  {
   long  awc[uMaxShortRawSize];
   int iChars = ByteStreamToWideChar(acRaw + 3, uRawSize - 3, awc, ARRSIZE(awc));
   if (iChars >= 0)
    return CStringW(awc, iChars);
  }
  else if (bOptUTF8)
  {
   long  awc[uMaxShortRawSize];
   //int iChars = ByteStreamToWideChar(acRaw, uRawSize, awc, ARRSIZE(awc));
   int iChars = utf8towc(acRaw, uRawSize, awc, ARRSIZE(awc));
   if (iChars >= 0)
    return CStringW(awc, iChars);
  }
  return CStringW(acRaw, uRawSize); // use local codepage
 }
 else
 {
  Array       acRaw(uRawSize);
  Read(acRaw, uRawSize);
  if (uRawSize >= 3 && (UCHAR)acRaw[0] == 0xEFU && (UCHAR)acRaw[1] == 0xBBU && (UCHAR)acRaw[2] == 0xBFU)
  {
   Array        awc(uRawSize);
   int iChars = ByteStreamToWideChar(acRaw + 3, uRawSize - 3, awc, uRawSize);
   if (iChars >= 0)
    return CStringW(awc, iChars);
  }
  else if (bOptUTF8)
  {
   Array        awc(uRawSize);
   //int iChars = ByteStreamToWideChar(acRaw, uRawSize, awc, uRawSize);
   int iChars = utf8towc(acRaw, uRawSize, awc, uRawSize);
   if (iChars >= 0)
    return CStringW(awc, iChars);
  }
  return CStringW(acRaw, uRawSize); // use local codepage
 }
}

CString CFileDataIO::ReadString(bool bOptUTF8)
{
 unsigned int uLen = ReadUInt16();
 return ReadString(bOptUTF8, uLen);
}

CStringW CFileDataIO::ReadStringUTF8()
{
 unsigned int uRawSize = ReadUInt16();
 const unsigned int uMaxShortRawSize = SHORT_RAW_ED2K_UTF8_STR;
 if (uRawSize <= uMaxShortRawSize)
 {
  char acRaw[uMaxShortRawSize];
  Read(acRaw, uRawSize);
  long  awc[uMaxShortRawSize];
  int iChars = ByteStreamToWideChar(acRaw, uRawSize, awc, ARRSIZE(awc));
  if (iChars >= 0)
   return CStringW(awc, iChars);
  return CStringW(acRaw, uRawSize); // use local codepage
 }
 else
 {
  Array       acRaw(uRawSize);
  Read(acRaw, uRawSize);
  Array        awc(uRawSize);
  int iChars = ByteStreamToWideChar(acRaw, uRawSize, awc, uRawSize);
  if (iChars >= 0)
   return CStringW(awc, iChars);
  return CStringW(acRaw, uRawSize); // use local codepage;
 }
}

void CFileDataIO::WriteUInt8(uint8 nVal)
{
 Write(&nVal, sizeof nVal);
}

void CFileDataIO::WriteUInt16(uint16 nVal)
{
 Write(&nVal, sizeof nVal);
}

void CFileDataIO::WriteUInt32(uint32 nVal)
{
 Write(&nVal, sizeof nVal);
}

void CFileDataIO::WriteUInt64(uint64 nVal)
{
 Write(&nVal, sizeof nVal);
}

void CFileDataIO::WriteUInt128(const Kademlia::CUInt128 *pVal)
{
 Write(pVal->GetData(), 16);
}

void CFileDataIO::WriteHash16(const uchar* pVal)
{
 Write(pVal, 16);
}

void CFileDataIO::WriteString(const CString& rstr, EUtf8Str eEncode)
{

 if (eEncode == utf8strRaw)
 {
  CUnicodeToUTF8 utf8(rstr);
  WriteUInt16((uint16)(utf8.GetLength()));
  Write((const char*)utf8, utf8.GetLength());
 }
 else if (eEncode == utf8strOptBOM)
 {
  if (NeedUTF8String(rstr))
  {
   CUnicodeToBOMUTF8 bomutf8(rstr);
   WriteUInt16((uint16)(bomutf8.GetLength()));
   Write((const char*)bomutf8, bomutf8.GetLength());
  }
  else
  {
   CUnicodeToMultiByte mb(rstr);
   WriteUInt16((uint16)(mb.GetLength()));
   Write((const char*)mb, mb.GetLength());
  }
 }
 else
 {
  CUnicodeToMultiByte mb(rstr);
  WriteUInt16((uint16)(mb.GetLength()));
  Write((const char*)mb, mb.GetLength());
 }

}

void CFileDataIO::WriteString(const char* psz)
{
 unsigned int uLen = strlen(psz);
 WriteUInt16((uint16)uLen);
 Write(psz, uLen);
}

void CFileDataIO::WriteLongString(const CString& rstr, EUtf8Str eEncode)
{

 if (eEncode == utf8strRaw)
 {
  CUnicodeToUTF8 utf8(rstr);
  WriteUInt32(utf8.GetLength());
  Write((const char*)utf8, utf8.GetLength());
 }
 else if (eEncode == utf8strOptBOM)
 {
  if (NeedUTF8String(rstr))
  {
   CUnicodeToBOMUTF8 bomutf8(rstr);
   WriteUInt32(bomutf8.GetLength());
   Write((const char*)bomutf8, bomutf8.GetLength());
  }
  else
  {
   CUnicodeToMultiByte mb(rstr);
   WriteUInt32(mb.GetLength());
   Write((const char*)mb, mb.GetLength());
  }
 }
 else
 {
  CUnicodeToMultiByte mb(rstr);
  WriteUInt32(mb.GetLength());
  Write((const char*)mb, mb.GetLength());
 }

}

void CFileDataIO::WriteLongString(const char* psz)
{
 unsigned int uLen = strlen(psz);
 WriteUInt32(uLen);
 Write(psz, uLen);
}

///////////////////////////////////////////////////////////////////////////////
// CSafeFile

unsigned int CSafeFile::Read(void* lpBuf, unsigned int nCount)
{
 if (GetPosition() + nCount > GetLength())
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 return CFile::Read(lpBuf, nCount);
}

void CSafeFile::Write(const void* lpBuf, unsigned int nCount)
{
 CFile::Write(lpBuf, nCount);
}

unsigned long CSafeFile::Seek(long     lOff, unsigned int nFrom)
{
 return CFile::Seek(lOff, nFrom);
}

unsigned long CSafeFile::GetPosition() const
{
 return CFile::GetPosition();
}

unsigned long CSafeFile::GetLength() const {
 return CFile::GetLength();
}


///////////////////////////////////////////////////////////////////////////////
// CSafeMemFile

unsigned int CSafeMemFile::Read(void* lpBuf, unsigned int nCount)
{
 if (m_nPosition + nCount > m_nFileSize)
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 return CMemFile::Read(lpBuf, nCount);
}

void CSafeMemFile::Write(const void* lpBuf, unsigned int nCount)
{
 CMemFile::Write(lpBuf, nCount);
}

unsigned long CSafeMemFile::Seek(long     lOff, unsigned int nFrom)
{
 return CMemFile::Seek(lOff, nFrom);
}

uint8 CSafeMemFile::ReadUInt8()
{
 if (m_nPosition + sizeof(uint8) > m_nFileSize)
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 return *(m_lpBuffer + m_nPosition++);
}

uint16 CSafeMemFile::ReadUInt16()
{
 if (m_nPosition + sizeof(uint16) > m_nFileSize)
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 uint16 nResult = *((uint16*)(m_lpBuffer + m_nPosition));
 m_nPosition += sizeof(uint16);
 return nResult;
}

uint32 CSafeMemFile::ReadUInt32()
{
 if (m_nPosition + sizeof(uint32) > m_nFileSize)
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 uint32 nResult = *((uint32*)(m_lpBuffer + m_nPosition));
 m_nPosition += sizeof(uint32);
 return nResult;
}

uint64 CSafeMemFile::ReadUInt64()
{
 if (m_nPosition + sizeof(uint64) > m_nFileSize)
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 uint64 nResult = *((uint64*)(m_lpBuffer + m_nPosition));
 m_nPosition += sizeof(uint64);
 return nResult;
}

void CSafeMemFile::ReadUInt128(Kademlia::CUInt128* pVal)
{
 if (m_nPosition + sizeof(uint32)*4 > m_nFileSize)
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 uint32* pUInt32Val = (uint32*)pVal->GetDataPtr();
 const uint32* pUInt32 = (uint32*)(m_lpBuffer + m_nPosition);
 pUInt32Val[0] = pUInt32[0];
 pUInt32Val[1] = pUInt32[1];
 pUInt32Val[2] = pUInt32[2];
 pUInt32Val[3] = pUInt32[3];
 m_nPosition += sizeof(uint32)*4;
}

void CSafeMemFile::ReadHash16(uchar* pVal)
{
 if (m_nPosition + sizeof(uint32)*4 > m_nFileSize)
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 const uint32* pUInt32 = (uint32*)(m_lpBuffer + m_nPosition);
 ((uint32*)pVal)[0] = pUInt32[0];
 ((uint32*)pVal)[1] = pUInt32[1];
 ((uint32*)pVal)[2] = pUInt32[2];
 ((uint32*)pVal)[3] = pUInt32[3];
 m_nPosition += sizeof(uint32)*4;
}

void CSafeMemFile::WriteUInt8(uint8 nVal)
{
 if (m_nPosition + sizeof(uint8) > m_nBufferSize)
  GrowFile(m_nPosition + sizeof(uint8));
 *(m_lpBuffer + m_nPosition++) = nVal;
 if (m_nPosition > m_nFileSize)
  m_nFileSize = m_nPosition;
}

void CSafeMemFile::WriteUInt16(uint16 nVal)
{
 if (m_nPosition + sizeof(uint16) > m_nBufferSize)
  GrowFile(m_nPosition + sizeof(uint16));
 *((uint16*)(m_lpBuffer + m_nPosition)) = nVal;
 m_nPosition += sizeof(uint16);
 if (m_nPosition > m_nFileSize)
  m_nFileSize = m_nPosition;
}

void CSafeMemFile::WriteUInt32(uint32 nVal)
{
 if (m_nPosition + sizeof(uint32) > m_nBufferSize)
  GrowFile(m_nPosition + sizeof(uint32));
 *((uint32*)(m_lpBuffer + m_nPosition)) = nVal;
 m_nPosition += sizeof(uint32);
 if (m_nPosition > m_nFileSize)
  m_nFileSize = m_nPosition;
}

void CSafeMemFile::WriteUInt64(uint64 nVal)
{
 if (m_nPosition + sizeof(uint64) > m_nBufferSize)
  GrowFile(m_nPosition + sizeof(uint64));
 *((uint64*)(m_lpBuffer + m_nPosition)) = nVal;
 m_nPosition += sizeof(uint64);
 if (m_nPosition > m_nFileSize)
  m_nFileSize = m_nPosition;
}

void CSafeMemFile::WriteUInt128(const Kademlia::CUInt128* pVal)
{
 if (m_nPosition + sizeof(uint32)*4 > m_nBufferSize)
  GrowFile(m_nPosition + sizeof(uint32)*4);
 uint32* pUInt32 = (uint32*)(m_lpBuffer + m_nPosition);
 const uint32* pUInt32Val = (uint32*)pVal->GetData();
 pUInt32[0] = pUInt32Val[0];
 pUInt32[1] = pUInt32Val[1];
 pUInt32[2] = pUInt32Val[2];
 pUInt32[3] = pUInt32Val[3];
 m_nPosition += sizeof(uint32)*4;
 if (m_nPosition > m_nFileSize)
  m_nFileSize = m_nPosition;
}

void CSafeMemFile::WriteHash16(const uchar* pVal)
{
 if (m_nPosition + sizeof(uint32)*4 > m_nBufferSize)
  GrowFile(m_nPosition + sizeof(uint32)*4);
 uint32* pUInt32 = (uint32*)(m_lpBuffer + m_nPosition);
 pUInt32[0] = ((uint32*)pVal)[0];
 pUInt32[1] = ((uint32*)pVal)[1];
 pUInt32[2] = ((uint32*)pVal)[2];
 pUInt32[3] = ((uint32*)pVal)[3];
 m_nPosition += sizeof(uint32)*4;
 if (m_nPosition > m_nFileSize)
  m_nFileSize = m_nPosition;
}

unsigned long CSafeMemFile::GetPosition() const
{
 return CMemFile::GetPosition();
}

unsigned long CSafeMemFile::GetLength() const {
 return CMemFile::GetLength();
}


///////////////////////////////////////////////////////////////////////////////
// CSafeBufferedFile

unsigned int CSafeBufferedFile::Read(void* lpBuf, unsigned int nCount)
{
 // that's terrible slow
// if (GetPosition()+nCount > this->GetLength())
//  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 unsigned int uRead = CStdioFile::Read(lpBuf,nCount);
 if (uRead != nCount)
  AfxThrowFileException(CFileException::endOfFile, 0, GetFileName());
 return uRead;
}

void CSafeBufferedFile::Write(const void* lpBuf, unsigned int nCount)
{
 CStdioFile::Write(lpBuf, nCount);
}

unsigned long CSafeBufferedFile::Seek(long     lOff, unsigned int nFrom)
{
 return CStdioFile::Seek(lOff, nFrom);
}

unsigned long CSafeBufferedFile::GetPosition() const
{
 return CStdioFile::GetPosition();
}

unsigned long CSafeBufferedFile::GetLength() const {
 return CStdioFile::GetLength();
}

int CSafeBufferedFile::printf(const char* pszFmt, ...)
{
 va_list args;
 va_start(args, pszFmt);
 int iResult = _vftprintf(m_pStream, pszFmt, args);
 va_end(args);
 if (iResult < 0) {

  AfxThrowFileException(CFileException::genericException, _doserrno, m_strFileName);



 }
 return iResult;
}






 