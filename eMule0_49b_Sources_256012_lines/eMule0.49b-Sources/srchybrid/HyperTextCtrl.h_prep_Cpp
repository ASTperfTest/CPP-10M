/********************************************************************

  HyperTextCtrl.h - Controls that shows hyperlinks
  in text

  Copyright (C) 2001-2002 Magomed G. Abdurakhmanov

********************************************************************/
//edited2002 Merkur ( devs@emule-project.net / http://www.emule-project.net )
//-> converted it to MFC
//-> included colored keywords
//-> fixed     bugs
//-> made it flickerfree
//-> some other small changes
// (the whole code still needs some work though)
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

void INCLUDEREPLACE(){CX_INCL("list");}
void INCLUDEREPLACE(){CX_INCL("vector");}







// --------------------------------------------------------------
// CHyperLink

class CHyperLink{
 friend class CPreparedHyperText;
public:
 CHyperLink(); // i_a
 CHyperLink(int iBegin, uint16 iEnd, const CString& sTitle, const CString& sCommand, const CString& sDirectory);
 CHyperLink(int iBegin, uint16 iEnd, const CString& sTitle, void* hWnd, unsigned int uMsg, int *  wParam, long * lParam);
 CHyperLink(const CHyperLink& Src);

 void Execute();
 bool operator__Less (const CHyperLink& Arg) const {return m_iEnd < Arg.m_iEnd;}
 unsigned int Begin() const        {return m_iBegin;}
 unsigned int End() const        {return m_iEnd;}
 unsigned int Len() const        {return m_iEnd - m_iBegin + 1;}
 CString Title() const       {return m_sTitle;}
 void SetBegin( uint16 m_iInBegin )    {m_iBegin = m_iInBegin;}
 void SetEnd( uint16 m_iInEnd )     {m_iEnd = m_iInEnd;}

protected:
 int m_iBegin;
 int m_iEnd;
 CString m_sTitle;

 enum LinkType
 {
  lt_Unknown = 0,  // i_a
  lt_Shell = 0, /* http:// mailto:*/
  lt_Message = 1 /* WM_COMMAND */
 } m_Type;

 // used for lt_Shell
 CString m_sCommand;
 CString m_sDirectory;
 // used for lt_Message
 void* m_hWnd;
 unsigned int m_uMsg;
 int *  m_wParam;
 long * m_lParam;
};

// --------------------------------------------------------------
// CKeyWord

class CKeyWord{
 friend class CPreparedHyperText;
public:
 CKeyWord();
 CKeyWord(int iBegin, uint16 iEnd, unsigned long icolor);

 bool operator__Less (const CKeyWord& Arg) const  {return m_iEnd < Arg.m_iEnd;}
 unsigned int Begin() const        {return m_iBegin;}
 unsigned int End() const        {return m_iEnd;}
 void SetBegin( uint16 m_iInBegin )    {m_iBegin = m_iInBegin;}
 void SetEnd( uint16 m_iInEnd )     {m_iEnd = m_iInEnd;}
 unsigned long Color() const       {return color;}
 unsigned int Len() const        {return m_iEnd - m_iBegin + 1;}
protected:
 int m_iBegin;
 int m_iEnd;
 unsigned long color;
};

// --------------------------------------------------------------
// CPreparedHyperText

class CPreparedHyperText{
public:
 CPreparedHyperText()      {}
 CPreparedHyperText(const CString& sText);
 CPreparedHyperText(const CPreparedHyperText& src);

 void Clear();
 void SetText(const CString& sText);
 void AppendText(const CString& sText);
 void AppendHyperLink(const CString& sText, const CString& sTitle, const CString& sCommand, const CString& sDirectory);
 void AppendHyperLink(const CString& sText, const CString& sTitle, void* hWnd, unsigned int uMsg, int *  wParam, long * lParam);
 void AppendKeyWord(const CString& sText, unsigned long iColor);

  CString& GetText()     {return m_sText;}
  std::list            & GetLinks() {return m_Links;}
  std::list          & GetKeywords() {return m_KeyWords;}
 //friend class CHyperTextCtrl;

protected:
 CString m_sText;
 std::list             m_Links;
 std::list           m_KeyWords;

 void RemoveLastSign(CString& sLink);
 void PrepareText(const CString& sText);
 bool tspace(char  c)      {return _istspace((_TUCHAR)c) || /*c < _T(' ') || */c == _T(';') || c == _T('!');}

};
// --------------------------------------------------------------
// CLinePartInfo
class CLinePartInfo{
public:
 uint16 m_xBegin;
 uint16 m_xEnd;
 CHyperLink* m_pHyperLink;
 CKeyWord* m_pKeyWord;

 CLinePartInfo(int iBegin, uint16 iEnd, CHyperLink* pHyperLink = NULL, CKeyWord* pKeyWord = NULL);
 CLinePartInfo(const CLinePartInfo& Src);
 uint16 Begin()       {return m_xBegin;}
 uint16 End()       {return m_xEnd;}
 uint16 Len()       {return ((m_xEnd - m_xBegin) + 1);}
};

// --------------------------------------------------------------
// CLineInfo
class CLineInfo :        std::vector               {
public:
 int m_iBegin;
 int m_iEnd;

 CLineInfo(int iBegin, uint16 iEnd);
 CLineInfo(const CLineInfo& Src);
 unsigned int Begin()      {return m_iBegin;}
 unsigned int End()       {return m_iEnd;}
 unsigned int Len()       {return m_iEnd - m_iBegin + 1;}
};

// --------------------------------------------------------------
// CVisPart
class CVisPart :        CLinePartInfo {
public:
 CRect m_rcBounds;
 int m_iRealBegin;
 int m_iRealLen;
 CVisPart* m_pPrev;
 CVisPart* m_pNext;

 CVisPart(const CLinePartInfo& LinePartInfo, const CRect& rcBounds,
  int iRealBegin, uint16 iRealLen,CVisPart* pPrev,CVisPart* pNext);
 CVisPart(const CVisPart& Src);
};

class CVisLine :        std::vector
{ };


// --------------------------------------------------------------
// CHyperTextCtrl

class CHyperTextCtrl :        CWnd{
 //DECLARE_DYNAMIC(CHyperTextCtrl)
protected:
 CPreparedHyperText* m_Text;
 CPreparedHyperText  standart_Text;
 std::vector            m_Lines;
 CFont* m_Font;
 unsigned long m_BkColor;
 unsigned long m_TextColor;
 unsigned long m_LinkColor;
 unsigned long m_HoverColor;
 HCURSOR m_LinkCursor;
 HCURSOR m_DefaultCursor;

 CToolTipCtrl m_tip;

 //temporary variables
 bool vscrollon;
 int m_iMaxWidth;    // The maximum line width
 int m_iLineHeight;    // Height of one line
 int m_iLinesHeight;    // Sum of height of all lines
 bool m_bDontUpdateSizeInfo;  // Used to prevent recursive call of the method
 int m_iVertPos;     // Vertical position in percents
 int m_iHorzPos;     // Horizontal position in percents
 CFont m_DefaultFont;   // This font is set by default
 CFont m_LinksFont;    // Copied from main font to faster
 CFont m_HoverFont;    // Copied from main font to faster
 std::vector           m_VisLines; // Currently visible text
 CVisPart* m_pActivePart;  // Active part of
 int m_iWheelDelta;    // Mouse wheel scroll delta


public:
 CHyperTextCtrl();
 virtual int  PreTranslateMessage(MSG* /*pMsg*/)   {return FALSE;}
 void Clear()     {m_Text->Clear();UpdateSize(true);}

 //message handlers
         void OnMouseMove(unsigned int nFlags,CPoint pt);
         void OnLButtonDown(unsigned int nFlags,CPoint pt);
         int  OnMouseWheel(unsigned int nFlags,short zDelta,CPoint pt);
         long *  OnCreate(int *  wParam, long * lParam);
         long *  OnDestroy(int *  wParam, long * lParam);
         long *  OnPaint(int *  wParam, long * lParam);
         long *  OnSize(int *  wParam, long * lParam);
         long *  OnShowWindow(int *  wParam, long * lParam);
         long *  OnSetText(int *  wParam, long * lParam);
         long *  OnGetText(int *  wParam, long * lParam);
         long *  OnSetFont(int *  wParam, long * lParam);
         long *  OnGetFont(int *  wParam, long * lParam);
         long *  OnHScroll(int *  wParam, long * lParam);
         long *  OnVScroll(int *  wParam, long * lParam);
         long *  OnCaptureChanged(int *  wParam, long * lParam);
         int  OnEraseBkgnd(CDC* pDC);
         void OnSysColorChange();
 // Operations
  CPreparedHyperText* GetHyperText();
  void SetHyperText(CPreparedHyperText* Src, bool bInvalidate = true);
  void AppendText(const CString& sText, bool bInvalidate = true);
  void AppendHyperLink(const CString& sText, const CString& sTitle, const CString& sCommand, const CString& sDirectory, bool bInvalidate = true);
  void AppendHyperLink(const CString& sText, const CString& sTitle, void* hWnd, unsigned int uMsg, int *  wParam, long * lParam, bool bInvalidate = true);
  void AppendKeyWord(const CString& sText, unsigned long icolor);
  unsigned long GetBkColor()       {return m_BkColor;}
  void SetBkColor(unsigned long Color)    {m_BkColor = Color;}
  unsigned long GetTextColor()      {return m_TextColor;}
  void SetTextColor(unsigned long Color)    {m_TextColor = Color;}
  unsigned long GetLinkColor()      {return m_LinkColor;}
  void SetLinkColor(unsigned long LinkColor, bool bInvalidate = true);
  unsigned long GetHoverColor()      {return m_HoverColor;}
  void SetHoverColor(unsigned long HoverColor)  {m_HoverColor = HoverColor;}
  HCURSOR GetLinkCursor()      {return m_LinkCursor;}
  void SetLinkCursor(HCURSOR LinkCursor)   {m_LinkCursor = LinkCursor;}
  HCURSOR GetDefaultCursor()      {return m_DefaultCursor;}
  void SetDefaultCursor(HCURSOR DefaultCursor) {m_DefaultCursor = DefaultCursor;}
  void UpdateSize(bool bRepaint);
protected:
 bool check_bits(unsigned long Value, unsigned long Mask)  {return (Value & Mask) == Mask;}
 void UpdateFonts();
 void UpdateVisLines();
 void HighlightLink(CVisPart* Part, const CPoint& MouseCoords);
 void RestoreLink();
 void SetColors();
 void LoadHandCursor();
};






 