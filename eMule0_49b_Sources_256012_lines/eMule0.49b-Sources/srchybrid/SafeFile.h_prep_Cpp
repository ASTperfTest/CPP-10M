//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE. See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.


namespace Kademlia{
 class CUInt128;
};



enum EUtf8Str
{
 utf8strNone,
 utf8strOptBOM,
 utf8strRaw
};


///////////////////////////////////////////////////////////////////////////////
// CFileDataIO

class CFileDataIO
{
public:
 virtual unsigned int Read(void* lpBuf, unsigned int nCount) = 0;
 virtual void Write(const void* lpBuf, unsigned int nCount) = 0;
 virtual unsigned long Seek(long     lOff, unsigned int nFrom) = 0;
 virtual unsigned long GetPosition() const = 0;
 virtual unsigned long GetLength() const = 0;

 virtual uint8 ReadUInt8();
 virtual uint16 ReadUInt16();
 virtual uint32 ReadUInt32();
 virtual uint64 ReadUInt64();
 virtual void ReadUInt128(Kademlia::CUInt128 *pVal);
 virtual void ReadHash16(uchar* pVal);
 virtual CString ReadString(bool bOptUTF8);
 virtual CString ReadString(bool bOptUTF8, unsigned int uRawSize);
 virtual CStringW ReadStringUTF8();

 virtual void WriteUInt8(uint8 nVal);
 virtual void WriteUInt16(uint16 nVal);
 virtual void WriteUInt32(uint32 nVal);
 virtual void WriteUInt64(uint64 nVal);
 virtual void WriteUInt128(const Kademlia::CUInt128 *pVal);
 virtual void WriteHash16(const uchar* pVal);
 virtual void WriteString(const CString& rstr, EUtf8Str eEncode = utf8strNone);
 virtual void WriteString(const char* psz);
 virtual void WriteLongString(const CString& rstr, EUtf8Str eEncode = utf8strNone);
 virtual void WriteLongString(const char* psz);
};


///////////////////////////////////////////////////////////////////////////////
// CSafeFile

class CSafeFile :        CFile,        CFileDataIO
{
public:
 CSafeFile() {}
 CSafeFile::CSafeFile(const char* lpszFileName, unsigned int nOpenFlags)
  : CFile(lpszFileName, nOpenFlags) {}

 virtual unsigned int Read(void* lpBuf, unsigned int nCount);
 virtual void Write(const void* lpBuf, unsigned int nCount);
 virtual unsigned long Seek(long     lOff, unsigned int nFrom);
 virtual unsigned long GetPosition() const;
 virtual unsigned long GetLength() const;
};


///////////////////////////////////////////////////////////////////////////////
// CSafeMemFile

class CSafeMemFile :        CMemFile,        CFileDataIO
{
public:
 CSafeMemFile(unsigned int nGrowBytes = 512)
  : CMemFile(nGrowBytes) {}
 //CSafeMemFile::CSafeMemFile(unsigned char* lpBuffer, unsigned int nBufferSize, unsigned int nGrowBytes = 0)
 // : CMemFile(lpBuffer, nBufferSize, nGrowBytes) {}
 CSafeMemFile::CSafeMemFile(const unsigned char* lpBuffer, unsigned int nBufferSize)
  : CMemFile(const_cast       (lpBuffer), nBufferSize, 0) {}

 const unsigned char* GetBuffer() const { return m_lpBuffer; }

 virtual unsigned int Read(void* lpBuf, unsigned int nCount);
 virtual void Write(const void* lpBuf, unsigned int nCount);
 virtual unsigned long Seek(long     lOff, unsigned int nFrom);
 virtual unsigned long GetPosition() const;
 virtual unsigned long GetLength() const;

 virtual uint8 ReadUInt8();
 virtual uint16 ReadUInt16();
 virtual uint32 ReadUInt32();
 virtual uint64 ReadUInt64();
 virtual void ReadUInt128(Kademlia::CUInt128 *pVal);
 virtual void ReadHash16(uchar* pVal);

 virtual void WriteUInt8(uint8 nVal);
 virtual void WriteUInt16(uint16 nVal);
 virtual void WriteUInt32(uint32 nVal);
 virtual void WriteUInt64(uint64 nVal);
 virtual void WriteUInt128(const Kademlia::CUInt128 *pVal);
 virtual void WriteHash16(const uchar* pVal);
};


///////////////////////////////////////////////////////////////////////////////
// CSafeBufferedFile

class CSafeBufferedFile :        CStdioFile,        CFileDataIO
{
public:
 CSafeBufferedFile() {}
 CSafeBufferedFile::CSafeBufferedFile(const char* lpszFileName, unsigned int nOpenFlags)
  : CStdioFile(lpszFileName, nOpenFlags) {}

 virtual unsigned int Read(void* lpBuf, unsigned int nCount);
 virtual void Write(const void* lpBuf, unsigned int nCount);
 virtual unsigned long Seek(long     lOff, unsigned int nFrom);
 virtual unsigned long GetPosition() const;
 virtual unsigned long GetLength() const;

 int printf(const char* pszFmt, ...);
};


///////////////////////////////////////////////////////////////////////////////
// Peek - helper functions for read-accessing memory without modifying the memory pointer

__inline uint8 PeekUInt8(const void* p)
{
 return *((uint8*)p);
}

__inline uint16 PeekUInt16(const void* p)
{
 return *((uint16*)p);
}

__inline uint32 PeekUInt32(const void* p)
{
 return *((uint32*)p);
}

__inline uint64 PeekUInt64(const void* p)
{
 return *((uint64*)p);
}



///////////////////////////////////////////////////////////////////////////////
// Poke - helper functions for write-accessing memory without modifying the memory pointer

__inline void PokeUInt8(void* p, uint8 nVal)
{
 *((uint8*)p) = nVal;
}

__inline void PokeUInt16(void* p, uint16 nVal)
{
 *((uint16*)p) = nVal;
}

__inline void PokeUInt32(void* p, uint32 nVal)
{
 *((uint32*)p) = nVal;
}

__inline void PokeUInt64(void* p, uint64 nVal)
{
 *((uint64*)p) = nVal;
}


///////////////////////////////////////////////////////////////////////////////
// Array


class Array
{
public:
 Array(unsigned int nCount)
 {
  m_aT = new T[nCount];
 }
 ~Array()
 {
  delete[] m_aT;
 }

 operator__7* ()
 {
  return m_aT;
 }

protected:
 T* m_aT;
};






 