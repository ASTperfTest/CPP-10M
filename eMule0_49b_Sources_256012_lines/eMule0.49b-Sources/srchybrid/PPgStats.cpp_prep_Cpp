//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("emule.h");}
void INCLUDEREPLACE(){CX_INCL("PPgStats.h");}
void INCLUDEREPLACE(){CX_INCL("OtherFunctions.h");}
void INCLUDEREPLACE(){CX_INCL("emuledlg.h");}
void INCLUDEREPLACE(){CX_INCL("Preferences.h");}
void INCLUDEREPLACE(){CX_INCL("StatisticsDlg.h");}
void INCLUDEREPLACE(){CX_INCL("HelpIDs.h");}
void INCLUDEREPLACE(){CX_INCL("UserMsgs.h");}




static char THIS_FILE[] =  "FILE" ;



//IMPLEMENT_DYNAMIC(CPPgStats, CPropertyPage)

/* BEGIN_MESSAGE_MAP(CPPgStats, CPropertyPage)
 ON_WM_HSCROLL()







END_MESSAGE_MAP() */ //)

CPPgStats::CPPgStats()
 : CPropertyPage(CPPgStats::IDD)
{
 m_iGraphsUpdate = 0;
 m_iGraphsAvgTime = 0;
 m_iStatsUpdate = 0;
 m_iStatsColors = 0;
 m_pdwStatsColors = NULL;
 m_bModified = FALSE;
 m_bFillGraphs = false;
}

CPPgStats::~CPPgStats()
{
}

void CPPgStats::OnDestroy()
{
 delete[] m_pdwStatsColors;
 m_pdwStatsColors = NULL;
}

void CPPgStats::DoDataExchange(CDataExchange* pDX)
{
 CPropertyPage::DoDataExchange(pDX);
 DDX_Control(pDX, IDC_COLORSELECTOR, m_colors);
 DDX_Control(pDX, IDC_COLOR_BUTTON, m_ctlColor);
 DDX_Control(pDX, IDC_CRATIO, m_cratio);
 DDX_Control(pDX, IDC_SLIDER, m_ctlGraphsUpdate);
 DDX_Control(pDX, IDC_SLIDER2, m_ctlStatsUpdate);
 DDX_Control(pDX, IDC_SLIDER3, m_ctlGraphsAvgTime);
}

void CPPgStats::SetModified(int  bChanged)
{
 m_bModified = bChanged;
 CPropertyPage::SetModified(bChanged);
}

int  CPPgStats::OnInitDialog()
{
 CPropertyPage::OnInitDialog();
 InitWindowStyles(this);

 ((CSliderCtrl*)GetDlgItem(IDC_SLIDER))->SetRange(0, 200, TRUE);

 m_ctlGraphsUpdate.SetPos(thePrefs.GetTrafficOMeterInterval());
 m_ctlGraphsUpdate.SetTicFreq(10);
 m_ctlGraphsUpdate.SetPageSize(10);

 m_ctlStatsUpdate.SetPos(thePrefs.GetStatsInterval());
 m_ctlStatsUpdate.SetTicFreq(10);
 m_ctlStatsUpdate.SetPageSize(10);

 m_ctlGraphsAvgTime.SetRange(0, 99);
 m_ctlGraphsAvgTime.SetPos(thePrefs.GetStatsAverageMinutes() - 1);
 for (int i = 10; i < 100; i += 10)
  m_ctlGraphsAvgTime.SetTic(i - 1);
 m_ctlGraphsAvgTime.SetPageSize(10);

 m_iGraphsUpdate = thePrefs.GetTrafficOMeterInterval();
 m_iGraphsAvgTime = thePrefs.GetStatsInterval();
 m_iStatsUpdate = thePrefs.GetStatsAverageMinutes();

 CheckDlgButton(IDC_FILL_GRAPHS, thePrefs.GetFillGraphs());

 // Set the Connections Statistics Y-Axis Scale
 SetDlgItemInt(IDC_CGRAPHSCALE, thePrefs.GetStatsMax(), FALSE);

 // Build our ratio combo and select the item corresponding to the currently set preference
 m_cratio.AddString(_T("1:1"));
 m_cratio.AddString(_T("1:2"));
 m_cratio.AddString(_T("1:3"));
 m_cratio.AddString(_T("1:4"));
 m_cratio.AddString(_T("1:5"));
 m_cratio.AddString(_T("1:10"));
 m_cratio.AddString(_T("1:20"));
 int n = thePrefs.GetStatsConnectionsGraphRatio();
 m_cratio.SetCurSel((n == 10) ? 5: ((n == 20) ? 6 : n - 1));

 m_iStatsColors = thePrefs.GetNumStatsColors();
 m_pdwStatsColors = new       unsigned long[m_iStatsColors];
 thePrefs.GetAllStatsColors(m_iStatsColors, m_pdwStatsColors);

 Localize();
 SetModified(FALSE);

 return TRUE;  // return      unless you set the focus to a control
      // EXCEPTION: OCX Property Pages should return FALSE
}

int  CPPgStats::OnApply()
{
 //TODO: cache all parameters. stats should be only if really needed
 if (m_bModified)
 {
  bool bInvalidateGraphs = false;

  if (thePrefs.SetAllStatsColors(m_iStatsColors, m_pdwStatsColors)){
   theApp.emuledlg->ShowTransferRate(true);
   bInvalidateGraphs = true;
  }

  if (thePrefs.GetTrafficOMeterInterval() != (unsigned int)m_iGraphsUpdate){
   thePrefs.SetTrafficOMeterInterval(m_iGraphsUpdate);
   bInvalidateGraphs = true;
  }
  if (thePrefs.GetStatsInterval() != (unsigned int)m_iGraphsAvgTime){
   thePrefs.SetStatsInterval(m_iGraphsAvgTime);
   bInvalidateGraphs = true;
  }
  if (thePrefs.GetStatsAverageMinutes() != (unsigned int)m_iStatsUpdate){
   thePrefs.SetStatsAverageMinutes(m_iStatsUpdate);
   bInvalidateGraphs = true;
  }

  char  buffer[20];
  GetDlgItem(IDC_CGRAPHSCALE)->GetWindowText(buffer, _countof(buffer));
  unsigned int statsMax = _tstoi(buffer);
  if (statsMax > thePrefs.GetMaxConnections() + 5)
  {
   if (thePrefs.GetStatsMax() != thePrefs.GetMaxConnections() + 5){
    thePrefs.SetStatsMax(thePrefs.GetMaxConnections() + 5);
    bInvalidateGraphs = true;
   }
   _sntprintf(buffer, _countof(buffer), _T("%d"), thePrefs.GetStatsMax());
   buffer[_countof(buffer) - 1] = _T('\0');
   GetDlgItem(IDC_CGRAPHSCALE)->SetWindowText(buffer);
  }
  else
  {
   if (thePrefs.GetStatsMax() != statsMax){
    thePrefs.SetStatsMax(statsMax);
    bInvalidateGraphs = true;
   }
  }

  int n = m_cratio.GetCurSel();
  unsigned int uRatio = (n == 5) ? 10 : ((n == 6) ? 20 : n + 1); // Index 5 = 1:10 and 6 = 1:20
  if (thePrefs.GetStatsConnectionsGraphRatio() != uRatio){
   thePrefs.SetStatsConnectionsGraphRatio(uRatio);
   bInvalidateGraphs = true;
  }

  if (thePrefs.GetFillGraphs() != (IsDlgButtonChecked(IDC_FILL_GRAPHS) == BST_CHECKED)){
   thePrefs.SetFillGraphs(!thePrefs.GetFillGraphs());
   bInvalidateGraphs = true;
  }

  if (bInvalidateGraphs){
   theApp.emuledlg->statisticswnd->UpdateConnectionsGraph(); // Set new         upper bound and   ratio for active connections.
   theApp.emuledlg->statisticswnd->Localize();
   theApp.emuledlg->statisticswnd->ShowInterval();
  }
  theApp.emuledlg->statisticswnd->RepaintMeters();
  theApp.emuledlg->statisticswnd->GetDlgItem(IDC_STATTREE)->EnableWindow(thePrefs.GetStatsInterval() > 0);
  SetModified(FALSE);
 }
 return CPropertyPage::OnApply();
}

void CPPgStats::Localize(void)
{
 if (m_hWnd)
 {
  GetDlgItem(IDC_GRAPHS)->SetWindowText(GetResString(IDS_GRAPHS));
  GetDlgItem(IDC_STREE)->SetWindowText(GetResString(IDS_STREE));
  GetDlgItem(IDC_STATIC_CGRAPHSCALE)->SetWindowText(GetResString(IDS_PPGSTATS_YSCALE));
  GetDlgItem(IDC_STATIC_CGRAPHRATIO)->SetWindowText(GetResString(IDS_PPGSTATS_ACRATIO));
  SetWindowText(GetResString(IDS_STATSSETUPINFO));
  GetDlgItem(IDC_PREFCOLORS)->SetWindowText(GetResString(IDS_COLORS));
  SetDlgItemText(IDC_FILL_GRAPHS, GetResString(IDS_FILLGRAPHS) );

  m_colors.ResetContent();
  int iItem;
  iItem = m_colors.AddString(GetResString(IDS_SP_BACKGROUND));  m_colors.SetItemData(iItem, 0);
  iItem = m_colors.AddString(GetResString(IDS_SP_GRID));    m_colors.SetItemData(iItem, 1);

  iItem = m_colors.AddString(GetResString(IDS_SP_DL3));    m_colors.SetItemData(iItem, 4);
  iItem = m_colors.AddString(GetResString(IDS_SP_DL2));    m_colors.SetItemData(iItem, 3);
  iItem = m_colors.AddString(GetResString(IDS_SP_DL1));    m_colors.SetItemData(iItem, 2);

  iItem = m_colors.AddString(GetResString(IDS_SP_UL3));    m_colors.SetItemData(iItem, 7);
  iItem = m_colors.AddString(GetResString(IDS_SP_UL2));    m_colors.SetItemData(iItem, 6);
  iItem = m_colors.AddString(GetResString(IDS_SP_UL1));    m_colors.SetItemData(iItem, 5);
  iItem = m_colors.AddString(GetResString(IDS_SP_ULSLOTSNOOVERHEAD)); m_colors.SetItemData(iItem, 14);
  iItem = m_colors.AddString(GetResString(IDS_SP_ULFRIENDS));   m_colors.SetItemData(iItem, 13);

  iItem = m_colors.AddString(GetResString(IDS_SP_ACTCON));   m_colors.SetItemData(iItem, 8);
  iItem = m_colors.AddString(GetResString(IDS_SP_ACTUL));    m_colors.SetItemData(iItem, 10);
  iItem = m_colors.AddString(GetResString(IDS_SP_TOTALUL));   m_colors.SetItemData(iItem, 9);
  iItem = m_colors.AddString(GetResString(IDS_SP_ACTDL));    m_colors.SetItemData(iItem, 12);
  iItem = m_colors.AddString(GetResString(IDS_SP_ICONBAR));   m_colors.SetItemData(iItem, 11);

  m_ctlColor.CustomText = GetResString(IDS_COL_MORECOLORS);
  m_ctlColor.DefaultText = NULL;

  m_colors.SetCurSel(0);
  OnCbnSelChangeColorSelector();
  ShowInterval();
 }
}

void CPPgStats::OnHScroll(unsigned int nSBCode, unsigned int nPos, CScrollBar* pScrollBar)
{
 CSliderCtrl* slider = (CSliderCtrl*)pScrollBar;
 int position = slider->GetPos();

 if (pScrollBar->GetSafeHwnd() == m_ctlGraphsUpdate.m_hWnd)
 {
  if (m_iGraphsUpdate != position){
   m_iGraphsUpdate = position;
   SetModified(TRUE);
  }
 }
 else if (pScrollBar->GetSafeHwnd() == m_ctlStatsUpdate.m_hWnd)
 {
  if (m_iGraphsAvgTime != position){
   m_iGraphsAvgTime = position;
   SetModified(TRUE);
  }
 }
 else
 {
  ASSERT( pScrollBar->GetSafeHwnd() == m_ctlGraphsAvgTime.m_hWnd );
  if (m_iStatsUpdate != position + 1){
   m_iStatsUpdate = position + 1;
   SetModified(TRUE);
  }
 }

 ShowInterval();

 UpdateData(false);
 CPropertyPage::OnHScroll(nSBCode, nPos, pScrollBar);
}

void CPPgStats::ShowInterval()
{
 CString strLabel;

 if (m_iGraphsUpdate == 0)
  strLabel.Format(GetResString(IDS_DISABLED));
 else
  strLabel.Format(GetResString(IDS_STATS_UPDATELABEL), m_iGraphsUpdate);
 GetDlgItem(IDC_SLIDERINFO)->SetWindowText(strLabel);

 if (m_iGraphsAvgTime == 0)
  strLabel.Format(GetResString(IDS_DISABLED));
 else
  strLabel.Format(GetResString(IDS_STATS_UPDATELABEL), m_iGraphsAvgTime);
 GetDlgItem(IDC_SLIDERINFO2)->SetWindowText(strLabel);

 strLabel.Format(GetResString(IDS_STATS_AVGLABEL), m_iStatsUpdate);
 GetDlgItem(IDC_SLIDERINFO3)->SetWindowText(strLabel);
}

void CPPgStats::OnCbnSelChangeColorSelector()
{
 int iSel = m_colors.GetCurSel();
 if (iSel >= 0)
 {
  int iIndex = m_colors.GetItemData(iSel);
  if (iIndex >= 0 && iIndex < m_iStatsColors)
   m_ctlColor.SetColor(m_pdwStatsColors[iIndex]);
 }
}

long CPPgStats::OnColorPopupSelChange(unsigned int /*lParam*/, long /*wParam*/)
{
 int iSel = m_colors.GetCurSel();
 if (iSel >= 0)
 {
  int iIndex = m_colors.GetItemData(iSel);
  if (iIndex >= 0 && iIndex < m_iStatsColors)
  {
   unsigned long crColor = m_ctlColor.GetColor();
   if (crColor != m_pdwStatsColors[iIndex])
   {
    m_pdwStatsColors[iIndex] = crColor;
    SetModified(TRUE);
   }
  }
 }
 return TRUE;
}

void CPPgStats::OnBnClickedFillGraphs()
{
 SetModified();
}

void CPPgStats::OnHelp()
{
 theApp.ShowHelp(eMule_FAQ_Preferences_Statistics);
}

int  CPPgStats::OnCommand(int *  wParam, long * lParam)
{
 if (wParam == ID_HELP)
 {
  OnHelp();
  return TRUE;
 }
 return __super::OnCommand(wParam, lParam);
}

int  CPPgStats::OnHelpInfo(HELPINFO* /*pHelpInfo*/)
{
 OnHelp();
 return TRUE;
}






 