//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("emule.h");}
void INCLUDEREPLACE(){CX_INCL("PreferencesDlg.h");}




static char THIS_FILE[] =  "FILE" ;



//IMPLEMENT_DYNAMIC(CPreferencesDlg, CTreePropSheet)

/* BEGIN_MESSAGE_MAP(CPreferencesDlg, CTreePropSheet)
 ON_WM_DESTROY()

END_MESSAGE_MAP() */ //)

CPreferencesDlg::CPreferencesDlg()
{
 m_psh.dwFlags &= ~PSH_HASHELP;
 m_wndGeneral.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndDisplay.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndConnection.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndServer.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndDirectories.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndFiles.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndStats.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndIRC.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndWebServer.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndTweaks.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndSecurity.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndScheduler.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndProxy.m_psp.dwFlags &= ~PSH_HASHELP;
 m_wndMessages.m_psp.dwFlags &= ~PSH_HASHELP;

 m_wndDebug.m_psp.dwFlags &= ~PSH_HASHELP;


 CTreePropSheet::SetPageIcon(&m_wndGeneral, _T("Preferences"));
 CTreePropSheet::SetPageIcon(&m_wndDisplay, _T("DISPLAY"));
 CTreePropSheet::SetPageIcon(&m_wndConnection, _T("CONNECTION"));
 CTreePropSheet::SetPageIcon(&m_wndProxy, _T("PROXY"));
 CTreePropSheet::SetPageIcon(&m_wndServer, _T("SERVER"));
 CTreePropSheet::SetPageIcon(&m_wndDirectories, _T("FOLDER "));
 CTreePropSheet::SetPageIcon(&m_wndFiles, _T("Transfer"));
 CTreePropSheet::SetPageIcon(&m_wndNotify, _T("NOTIFICATION "));
 CTreePropSheet::SetPageIcon(&m_wndStats, _T("STATISTIC "));
 CTreePropSheet::SetPageIcon(&m_wndIRC, _T("IRC"));
 CTreePropSheet::SetPageIcon(&m_wndSecurity, _T("SECURITY"));
 CTreePropSheet::SetPageIcon(&m_wndScheduler, _T("SCHEDULER"));
 CTreePropSheet::SetPageIcon(&m_wndWebServer, _T("WEB"));
 CTreePropSheet::SetPageIcon(&m_wndTweaks, _T("TWEAK"));
 CTreePropSheet::SetPageIcon(&m_wndMessages, _T("MESSAGE "));

 CTreePropSheet::SetPageIcon(&m_wndDebug, _T("Preferences"));


 AddPage(&m_wndGeneral);
 AddPage(&m_wndDisplay);
 AddPage(&m_wndConnection);
 AddPage(&m_wndProxy);
 AddPage(&m_wndServer);
 AddPage(&m_wndDirectories);
 AddPage(&m_wndFiles);
 AddPage(&m_wndNotify);
 AddPage(&m_wndStats);
 AddPage(&m_wndIRC);
 AddPage(&m_wndMessages);
 AddPage(&m_wndSecurity);
 AddPage(&m_wndScheduler);
 AddPage(&m_wndWebServer);
 AddPage(&m_wndTweaks);

 AddPage(&m_wndDebug);


 // The height of the option dialog is already too large for 640x480. To show as much as
 // possible we do not show a page caption (which is an decorative element only anyway).
 SetTreeViewMode(TRUE, GetSystemMetrics(SM_CYSCREEN) >= 600, TRUE);
 SetTreeWidth(170);

 m_pPshStartPage = NULL;
 m_bSaveIniFile = false;
}

CPreferencesDlg::~CPreferencesDlg()
{
}

void CPreferencesDlg::OnDestroy()
{
 CTreePropSheet::OnDestroy();
 if (m_bSaveIniFile)
 {
  thePrefs.Save();
  m_bSaveIniFile = false;
 }
 m_pPshStartPage = GetPage(GetActiveIndex())->m_psp.pszTemplate;
}

int  CPreferencesDlg::OnInitDialog()
{
 ASSERT( !m_bSaveIniFile );
 int  bResult = CTreePropSheet::OnInitDialog();
 InitWindowStyles(this);

 for (int i = 0; i < m_pages.GetSize(); i++)
 {
  if (GetPage(i)->m_psp.pszTemplate == m_pPshStartPage)
  {
   SetActivePage(i);
   break;
  }
 }

 Localize();
 return bResult;
}

void CPreferencesDlg::Localize()
{
 SetTitle(RemoveAmbersand(GetResString(IDS_EM_PREFS)));

 m_wndGeneral.Localize();
 m_wndDisplay.Localize();
 m_wndConnection.Localize();
 m_wndServer.Localize();
 m_wndDirectories.Localize();
 m_wndFiles.Localize();
 m_wndStats.Localize();
 m_wndNotify.Localize();
 m_wndIRC.Localize();
 m_wndSecurity.Localize();
 m_wndTweaks.Localize();
 m_wndWebServer.Localize();
 m_wndScheduler.Localize();
 m_wndProxy.Localize();
 m_wndMessages.Localize();

 int c = 0;

 CTreeCtrl* pTree = GetPageTreeControl();
 if (pTree)
 {
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_GENERAL)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_DISPLAY)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_CONNECTION)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_PROXY)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_SERVER)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_DIR)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_FILES)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_EKDEV_OPTIONS)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_STATSSETUPINFO)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_IRC)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_MESSAGESCOMMENTS)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_SECURITY)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_SCHEDULER)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_WS)));
  pTree->SetItemText(GetPageTreeItem(c++), RemoveAmbersand(GetResString(IDS_PW_TWEAK)));

  pTree->SetItemText(GetPageTreeItem(c++), _T("Debug"));

 }

 UpdateCaption();
}

void CPreferencesDlg::OnHelp()
{
 int iCurSel = GetActiveIndex();
 if (iCurSel >= 0)
 {
  CPropertyPage* pPage = GetPage(iCurSel);
  if (pPage)
  {
   HELPINFO hi = {0};
   hi.cbSize = sizeof hi;
   hi.iContextType = HELPINFO_WINDOW;
   hi.iCtrlId = 0;
   hi.hItemHandle = pPage->m_hWnd;
   hi.dwContextId = 0;
   pPage->SendMessage(WM_HELP, 0, (long *)&hi);
   return;
  }
 }

 theApp.ShowHelp(0, HELP_CONTENTS);
}

int  CPreferencesDlg::OnCommand(int *  wParam, long * lParam)
{
 if (wParam == ID_HELP)
 {
  OnHelp();
  return TRUE;
 }
 if (wParam == IDOK || wParam == ID_APPLY_NOW)
  m_bSaveIniFile = true;
 return __super::OnCommand(wParam, lParam);
}

int  CPreferencesDlg::OnHelpInfo(HELPINFO* /*pHelpInfo*/)
{
 OnHelp();
 return TRUE;
}

void CPreferencesDlg::SetStartPage(unsigned int uStartPageID)
{
 m_pPshStartPage = MAKEINTRESOURCE(uStartPageID);
}






 