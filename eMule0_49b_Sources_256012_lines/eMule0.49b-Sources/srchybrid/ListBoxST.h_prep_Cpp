//
// Class:  CListBoxST
//
// Compiler: Visual C++
// Tested on: Visual C++ 6.0
//
// Version: See or GetVersionI()
//
// Created: 13/March/2002
// Updated: 29/July/2002
//
// Author:  Davide Calabro'  davide_calabro@yahoo.com
//         http://www.softechsoftware.it
//
// Disclaimer
// ----------
// THIS          AND     ACCOMPANYING       ARE DISTRIBUTED "AS I " AND WITHOUT
// ANY            WHETHER           OR IMPLIED. NO                 FOR POSSIBLE
// DAMAGES    EVEN               CAN    TAKEN. THE      MUST        THE ENTIRE
// RISK    USING      SOFTWARE.
//
// Terms of use
// ------------
// THIS          IS      FOR          USE    FREEWARE APPLICATIONS.
// IF     USE               IN            OR           APPLICATIONS YOU
// ARE        ASKED    DONATE 1$ (ONE U.S. DOLLAR) TO     AUTHOR:
//
//  Davide Calabro'
//  P.O. Box 65
//  21019 Somma Lombardo (VA)
//  Italy
//


class CListBoxST :        CListBox
{
public:
 CListBoxST();
 virtual ~CListBoxST();

    enum { ST_FULLROWSELECT = 0, // Hilight full list box
    ST_FULLTEXTSELECT,   // Hilight half list box
    ST_TEXTSELECT    // Hilight only list box text
   };

 int AddString(const char* lpszItem, int nImage = -1L);
 int InsertString(int nIndex, const char* lpszString, int nImage = -1L);
 int DeleteString(int nIndex);
 int ReplaceString(int nIndex, const char* lpszString, int nImage = -1L);
 void ResetContent();

 int SetItemData(int nIndex, unsigned long dwItemData);
 unsigned long GetItemData(int nIndex);
 int SetItemDataPtr(int nIndex, void* pData);
 void* GetItemDataPtr(int nIndex);

 void EnableItem(int nIndex, int  bEnable = TRUE, int  bRepaint = TRUE);
 int  IsItemEnabled(int nIndex);

 void SetRowSelect(unsigned char byRowSelect = ST_FULLROWSELECT, int  bRepaint = TRUE);
 void SetImageList(CImageList* pImageList);
 void SetImage(int nIndex, int nImage, int  bRepaint = TRUE);
 void GetImage(int nIndex, LPINT lpnImage);

 int MoveUp(int nIndex, int  bSetCurSel = TRUE);
 int MoveDown(int nIndex, int  bSetCurSel = TRUE);
 int MoveTop(int nIndex, int  bSetCurSel = TRUE);
 int MoveBottom(int nIndex, int  bSetCurSel = TRUE);

 static short GetVersionI()  {return 11;}
 static const char* GetVersionC() {return (const char*)_T("1.1");}

 // ClassWizard generated virtual function overrides
 //{{           (CListBoxST)
 //}}           
 virtual void DrawItem(LPDRAWITEMSTRUCT lpDrawItemStruct);

protected:
 virtual unsigned long OnDrawTextBackground(int nIndex, CDC* pDC, CRect* prcItem, CRect* prcText, int  bIsDisabled, int  bIsSelected, unsigned long crSuggestedColor);
 //{{       (CListBoxST)
         void OnDestroy();
         int  OnReflectedDblclk();
 //}}       

 virtual unsigned long OnDrawIconBackground(int nIndex, CDC* pDC, CRect* prcItem, CRect* prcIcon, int  bIsDisabled, int  bIsSelected, unsigned long crSuggestedColor);
 virtual unsigned long OnDrawIcon(int nIndex, CDC* pDC, CRect* prcItem, CRect* prcIcon, int nImage, int  bIsDisabled, int  bIsSelected);

 unsigned char  m_byRowSelect;
 CImageList* m_pImageList;
 SIZE  m_szImage;  // Size of each image in image list

private:
 virtual void MeasureItem(LPMEASUREITEMSTRUCT lpMeasureItemStruct);

 int Move(int nOldIndex, int nNewIndex, int  bSetCurSel);
 void FreeResources();
 int ReplaceItemData(int nIndex, unsigned long dwItemData, void*  pData, int nImage, unsigned long dwFlags, unsigned char byMask);
 void DeleteItemData(int nIndex);


           class _STRUCT_LBDATA
 {
  unsigned long  dwItemData; // 32-bit value associated with an item in the list box
  void*   pData;  // Pointer associated with an item in the list box
  int   nImage;  // Image associated with an item in the list box. -1 if no image.
  unsigned int  nFormat; // Text alignment
  unsigned long  dwFlags; // Bit 0 - Item is disabled

  _STRUCT_LBDATA::_STRUCT_LBDATA()
  {::ZeroMemory(this, sizeof(_STRUCT_LBDATA));}
 };       _STRUCT_LBDATA STRUCT_LBDATA = "CX_TYPEDEF";



};






 