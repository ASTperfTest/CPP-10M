/* $Id: miniupnpc.h,v 1.17 2007/12/19 14:58:54 nanard Exp $ */
/* Project: miniupnp
 * http://miniupnp.free.fr/
 * Author: Thomas Bernard
 * Copyright (c) 2005-2006 Thomas Bernard
 * This software is subjects to the conditions detailed
 * in the         file provided within this distribution */



void INCLUDEREPLACE(){CX_INCL("declspec.h");}
void INCLUDEREPLACE(){CX_INCL("igd_desc_parse.h");}


           {


/* Structures definitions : */
 class UPNParg { const char * elt; const char * val; };

int simpleUPnPcommand(int, const char *, const char *,
                      const char *,        UPNParg *,
                      char *, int *);

 class UPNPDev {
        UPNPDev * pNext;
 char * descURL;
 char * st;
 char buffer[2];
};

/* upnpDiscover()
 * discover UPnP devices on the network.
 * The discovered devices are returned as a chained list.
 * It is up to the caller to free the list with freeUPNPDevlist().
 * delay (in millisecond) is the maximum time for waiting any device
 * response.
 * If available, device list will be obtained from MiniSSDPd.
 * Default path for minissdpd socket will be used if minissdpdsock argument
 * is NULL.
 * If multicastif is not NULL, it will be used instead of the default
 * multicast interface for sending      discover packets. */
LIBSPEC        UPNPDev * upnpDiscover(int delay, const char * multicastif,
                                      const char * minissdpdsock);
/* freeUPNPDevlist()
 * free list returned by upnpDiscover() */
LIBSPEC void freeUPNPDevlist(       UPNPDev * devlist);

/* parserootdesc() :
 * parse root     description of a UPnP device and fill the IGDdatas
 * structure. */
LIBSPEC void parserootdesc(const char *, int,        IGDdatas *);

/* structure used to get fast access to urls
 * controlURL: controlURL of the WANIPConnection
 * ipcondescURL: url of the description of the WANIPConnection
 * controlURL_CIF: controlURL of the WANCommonInterfaceConfig
 */
 class UPNPUrls {
 char * controlURL;
 char * ipcondescURL;
 char * controlURL_CIF;
};

/* UPNP_GetValidIGD() :
 * return values :
 *     0 =    IGD found
 *     1 =   valid connected     has been found
 *     2 =         IGD has been found but it reported as
 *         not connected
 *     3 =    UPnP device has been found but was not recognized as an IGD
 *
 * In any non zero return case, the urls and data structures
 * passed as parameters are set. Donc forget to call to
 * free allocated memory.
 */
LIBSPEC int
UPNP_GetValidIGD(       UPNPDev * devlist,
                        UPNPUrls * urls,
            IGDdatas * data,
     char * lanaddr, int lanaddrlen);

/* UPNP_GetIGDFromUrl()
 * Used when skipping the discovery process.
 * return value :
 *   0 - Not ok
 *   1 - OK */
LIBSPEC int
UPNP_GetIGDFromUrl(const char * rootdescurl,
                          UPNPUrls * urls,
                          IGDdatas * data,
                   char * lanaddr, int lanaddrlen);

LIBSPEC void GetUPNPUrls(       UPNPUrls *,        IGDdatas *, const char *);

LIBSPEC void FreeUPNPUrls(       UPNPUrls *);

/* Reads data from the specified socket.
 * Returns the number of bytes read if successful, zero if no bytes were
 * read or if we timed out. Returns negative if there was an error. */
int ReceiveData(int socket, char * data, int length, int timeout);


}










 