//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.




void INCLUDEREPLACE(){CX_INCL("resource.h");}







class CSearchList;
class CUploadQueue;
class CListenSocket;
class CDownloadQueue;
class CScheduler;
class UploadBandwidthThrottler;
class LastCommonRouteFinder;
class CemuleDlg;
class CClientList;
class CKnownFileList;
class CServerConnect;
class CServerList;
class CSharedFileList;
class CClientCreditsList;
class CFriendList;
class CClientUDPSocket;
class CIPFilter;
class CWebServer;
class CMMServer;
class CAbstractFile;
class CUpDownClient;
class CPeerCacheFinder;
class CFirewallOpener;
class CUPnPImplWrapper;

       SLogItem;

enum AppState{
 APP_STATE_RUNNING = 0,
    APP_STATE_SHUTTINGDOWN,
 APP_STATE_DONE
};

class CemuleApp :        CWinApp
{
public:
 CemuleApp(const char* lpszAppName = NULL);

 // ZZ:UploadSpeedSense -->
    UploadBandwidthThrottler* uploadBandwidthThrottler;
    LastCommonRouteFinder* lastCommonRouteFinder;
 // ZZ:UploadSpeedSense <--
 CemuleDlg*   emuledlg;
 CClientList*  clientlist;
 CKnownFileList*  knownfiles;
 CServerConnect*  serverconnect;
 CServerList*  serverlist;
 CSharedFileList* sharedfiles;
 CSearchList*  searchlist;
 CListenSocket*  listensocket;
 CUploadQueue*  uploadqueue;
 CDownloadQueue*  downloadqueue;
 CClientCreditsList* clientcredits;
 CFriendList*  friendlist;
 CClientUDPSocket* clientudp;
 CIPFilter*   ipfilter;
 CWebServer*   webserver;
 CScheduler*   scheduler;
 CMMServer*   mmserver;
 CPeerCacheFinder* m_pPeerCache;
 CFirewallOpener* m_pFirewallOpener;
 CUPnPImplWrapper* m_pUPnPFinder;

 void *    m_hMutexOneInstance;
 int     m_iDfltImageListColorFlags;
 CFont    m_fontHyperText;
 CFont    m_fontDefaultBold;
 CFont    m_fontSymbol;
 CFont    m_fontLog;
 CFont    m_fontChatEdit;
 CBrush    m_brushBackwardDiagonal;
 static const unsigned int m_nVersionMjr;
 static const unsigned int m_nVersionMin;
 static const unsigned int m_nVersionUpd;
 static const unsigned int m_nVersionBld;
 unsigned long    m_dwProductVersionMS;
 unsigned long    m_dwProductVersionLS;
 CString    m_strCurVersionLong;
 CString    m_strCurVersionLongDbg;
 unsigned int    m_uCurVersionShort;
 unsigned int    m_uCurVersionCheck;
 unsigned long   m_ullComCtrlVer;
 AppState   m_app_state; // defines application state for shutdown
 CMutex    hashing_mut;
 CString*   pstrPendingLink;
 COPYDATASTRUCT  sendstruct;

// Implementierung
 virtual int  InitInstance();
 virtual int ExitInstance();
 virtual int  IsIdleMessage(MSG *pMsg);

 // ed2k link functions
 void  AddEd2kLinksToDownload(CString strLinks, int cat);
 void  SearchClipboard();
 void  IgnoreClipboardLinks(CString strLinks) {m_strLastClipboardContents = strLinks;}
 void  PasteClipboard(int cat = 0);
 bool  IsEd2kFileLinkInClipboard();
 bool  IsEd2kServerLinkInClipboard();
 bool  IsEd2kLinkInClipboard(const char* pszLinkType, int iLinkTypeLen);
 const char*  GetProfileFile()  { return m_pszProfileName; }

 CString  CreateED2kSourceLink(const CAbstractFile* f);
// CString  CreateED2kHostnameSourceLink(const CAbstractFile* f);
 CString  CreateKadSourceLink(const CAbstractFile* f);

 // clipboard (text)
 bool  CopyTextToClipboard(CString strText);
 CString  CopyTextFromClipboard();

 void  OnlineSig();
 void  UpdateReceivedBytes(uint32 bytesToAdd);
 void  UpdateSentBytes(uint32 bytesToAdd, bool sentToFriend = false);
 int   GetFileTypeSystemImageIdx(const char* pszFilePath, int iLength = -1, bool bNormalsSize = false);
 HIMAGELIST GetSystemImageList() { return m_hSystemImageList; }
 HIMAGELIST GetBigSystemImageList() { return m_hBigSystemImageList; }
 CSize  GetSmallSytemIconSize() { return m_sizSmallSystemIcon; }
 CSize  GetBigSytemIconSize() { return m_sizBigSystemIcon; }
 void  CreateBackwardDiagonalBrush();
 void  CreateAllFonts();
 const CString &GetDefaultFontFaceName();
 bool  IsPortchangeAllowed();
 bool  IsConnected();
 bool  IsFirewalled();
 bool  CanDoCallback( CUpDownClient *client );
 uint32  GetID();
 uint32  GetPublicIP(bool bIgnoreKadIP = false) const; // return           or 0 if unknown
 void  SetPublicIP(const uint32 dwIP);
 void  ResetStandByIdleTimer();

 // because nearly all icons we are loading are 16x16, the default size is specified as 16 and not as 32 nor               
 void*  LoadIcon(const char* lpszResourceName, int cx = 16, int cy = 16, unsigned int uFlags = LR_DEFAULTCOLOR) const;
 void*  LoadIcon(unsigned int nIDResource) const;
 void *   LoadImage(const char* lpszResourceName, const char* pszResourceType) const;
 void *   LoadImage(unsigned int nIDResource, const char* pszResourceType) const;
 bool  LoadSkinColor(const char* pszKey, unsigned long& crColor) const;
 bool  LoadSkinColorAlt(const char* pszKey, const char* pszAlternateKey, unsigned long& crColor) const;
 CString  GetSkinFileItem(const char* lpszResourceName, const char* pszResourceType) const;
 void  ApplySkin(const char* pszSkinProfile);
 void  EnableRTLWindowsLayout();
 void  DisableRTLWindowsLayout();
 void  UpdateDesktopColorDepth();
 void  UpdateLargeIconSize();
 bool  IsVistaThemeActive() const;

 bool  GetLangHelpFilePath(CString& strResult);
 void  SetHelpFilePath(const char* pszHelpFilePath);
 void  ShowHelp(unsigned int uTopic, unsigned int uCmd = HELP_CONTEXT);
 bool  ShowWebHelp(unsigned int uTopic);

    // Elandal:ThreadSafeLogging -->
    // thread safe log calls
    void   QueueDebugLogLine(bool bAddToStatusBar, const char* line,...);
    void   QueueDebugLogLineEx(unsigned int uFlags, const char* line,...);
    void   HandleDebugLogQueue();
    void   ClearDebugLogQueue(bool bDebugPendingMsgs = false);

 void   QueueLogLine(bool bAddToStatusBar, const char* line,...);
    void   QueueLogLineEx(unsigned int uFlags, const char* line,...);
    void   HandleLogQueue();
    void   ClearLogQueue(bool bDebugPendingMsgs = false);
    // Elandal:ThreadSafeLogging <--

 bool   DidWeAutoStart() { return m_bAutoStart; }

protected:
 bool ProcessCommandline();
 void SetTimeOnTransfer();
 static int           SearchEmuleWindow(void* hWnd, long * lParam);


         void OnHelp();

 HIMAGELIST m_hSystemImageList;
 CMapStringToPtr m_aExtToSysImgIdx;
 CSize m_sizSmallSystemIcon;

 HIMAGELIST m_hBigSystemImageList;
 CMapStringToPtr m_aBigExtToSysImgIdx;
 CSize m_sizBigSystemIcon;

 CString  m_strDefaultFontFaceName;
 bool  m_bGuardClipboardPrompt;
 CString  m_strLastClipboardContents;

    // Elandal:ThreadSafeLogging -->
    // thread safe log calls
    CCriticalSection m_queueLock;
    CTypedPtrList                      m_QueueDebugLog;
    CTypedPtrList                      m_QueueLog;
    // Elandal:ThreadSafeLogging <--

 uint32 m_dwPublicIP;
 bool m_bAutoStart;

private:
    unsigned int     m_wTimerRes;
};

extern CemuleApp theApp;


//////////////////////////////////////////////////////////////////////////////
// CTempIconLoader

class CTempIconLoader
{
public:
 // because nearly all icons we are loading are 16x16, the default size is specified as 16 and not as 32 nor               
 CTempIconLoader(const char* pszResourceID, int cx = 16, int cy = 16, unsigned int uFlags = LR_DEFAULTCOLOR);
 CTempIconLoader(unsigned int uResourceID, int cx = 16, int cy = 16, unsigned int uFlags = LR_DEFAULTCOLOR);
 ~CTempIconLoader();

 operator__4() const{
  return this == NULL ? NULL : m_hIcon;
 }

protected:
 void* m_hIcon;
};






 