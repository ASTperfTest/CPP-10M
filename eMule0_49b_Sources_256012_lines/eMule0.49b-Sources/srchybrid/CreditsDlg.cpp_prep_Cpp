/*
  You may     modify this copyright message. You may add your name, if you
  changed or improved this code, but you mot not delete any part of this message or
  make it invisible etc.
*/
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("emule.h");}
void INCLUDEREPLACE(){CX_INCL("CreditsDlg.h");}
void INCLUDEREPLACE(){CX_INCL("CreditsThread.h");}




static char THIS_FILE[] =  "FILE" ;



// drawable area of the dialog





// button to dismiss dialog





/////////////////////////////////////////////////////////////////////////////
// CCreditsDlg dialog


CCreditsDlg::CCreditsDlg(CWnd* pParent /*=NULL*/)
 : CDialog(CCreditsDlg::IDD, pParent)
{
 //{{             (CCreditsDlg)
  // NOTE: the ClassWizard will add member initialization here
 //}}             

 m_pDC = NULL;
}
CCreditsDlg::~CCreditsDlg(){
 m_imgSplash.DeleteObject();
}

void CCreditsDlg::DoDataExchange(CDataExchange* pDX)
{
 CDialog::DoDataExchange(pDX);
 //{{            (CCreditsDlg)
  // NOTE: the ClassWizard will add     and     calls here
 //}}            
}


/* BEGIN_MESSAGE_MAP(CCreditsDlg, CDialog)
 ON_WM_LBUTTONDOWN()



END_MESSAGE_MAP() */ //)

/////////////////////////////////////////////////////////////////////////////
// CCreditsDlg message handlers

void CCreditsDlg::OnLButtonDown(unsigned int nFlags, CPoint point)
{
 CDialog::OnLButtonDown(nFlags, point);

 // see if they clicked on our button to dismiss the dialog
 if((point.x >= 0            ) && (point.x <= 350           ))
 {
  if((point.y >= 0           ) && (point.y <= 300            ))
  {
   CDialog::OnOK();
   return;
  }
 }

 PostMessage(WM_NCLBUTTONDOWN, HTCAPTION, MAKELPARAM(point.x, point.y));
}

int  CCreditsDlg::OnInitDialog()
{
 CDialog::OnInitDialog();
 VERIFY( m_imgSplash.Attach(theApp.LoadImage(_T("ABOUT"), _T("JPG"))) );
 m_rectScreen.SetRect(6          , 175       , 345         , 296          );
 StartThread();

 return TRUE;
}

void CCreditsDlg::OnDestroy()
{
 KillThread();

 delete m_pDC;
 m_pDC = NULL;

 CDialog::OnDestroy();
}

void CCreditsDlg::StartThread()
{
 m_pThread = new       CCreditsThread(this, m_pDC->GetSafeHdc(), m_rectScreen);

 if (m_pThread == NULL)
  return;

 ASSERT_VALID(m_pThread);
 m_pThread->m_pThreadParams = NULL;

 // Create Thread in a suspended state so we can set the Priority
 // before it starts getting away from us
 if (!m_pThread->CreateThread(CREATE_SUSPENDED))
 {
  delete m_pThread;
  m_pThread = NULL;
  return;
 }

 // thread priority has been set at idle priority to keep from bogging
 // down other apps that may also be running.
 VERIFY(m_pThread->SetThreadPriority(THREAD_PRIORITY_IDLE));
 // Now the thread can run wild
 m_pThread->ResumeThread();
}

void CCreditsDlg::KillThread()
{
 // tell thread to shutdown
 VERIFY(SetEvent(m_pThread->m_hEventKill));

 // wait for thread to finish shutdown
 VERIFY(WaitForSingleObject(m_pThread->m_hThread, INFINITE) == WAIT_OBJECT_0);

 delete m_pThread;
 m_pThread = NULL;
}

int CCreditsDlg::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
 if (CDialog::OnCreate(lpCreateStruct) == -1)
  return -1;

 // m_pDC must be initialized here instead of the constructor
 // because the void* isn't created until Create is called.
 m_pDC = new       CClientDC(this);

 return 0;
}

void CCreditsDlg::OnPaint()
{
 CPaintDC dc(this); // device context for painting

 if (m_imgSplash.GetSafeHandle())
 {
  CDC dcMem;

  if (dcMem.CreateCompatibleDC(&dc))
  {
   CBitmap* pOldBM = dcMem.SelectObject(&m_imgSplash);
   BITMAP BM;
   m_imgSplash.GetBitmap(&BM);

   WINDOWPLACEMENT wp;
   this->GetWindowPlacement(&wp);
   wp.rcNormalPosition.right= wp.rcNormalPosition.left+BM.bmWidth;
   wp.rcNormalPosition.bottom= wp.rcNormalPosition.top+BM.bmHeight;
   this->SetWindowPlacement(&wp);

   dc.BitBlt(0, 0, BM.bmWidth, BM.bmHeight, &dcMem, 0, 0, SRCCOPY);
   dcMem.SelectObject(pOldBM);
  }
 }
}





 