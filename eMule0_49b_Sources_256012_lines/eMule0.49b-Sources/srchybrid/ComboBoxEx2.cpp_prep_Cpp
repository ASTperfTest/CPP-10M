//this file is part of eMule
//Copyright (C)2002-2008 Merkur ( strEmail.Format("%s@%s", "devteam", "emule-project.net") / http://www.emule-project.net )
//
//This program is free software; you can redistribute it and/or
//modify it under the terms of the     General Public License
//as published by the Free Software Foundation; either
//version 2 of the License, or (at your option) any later version.
//
//This program is distributed in the hope that it will be useful,
//but         ANY WARRANTY; without even the implied warranty of
//MERCHANTABILITY or         FOR   PARTICULAR PURPOSE.  See the
//GNU General Public License for more details.
//
//You should have received a copy of the     General Public License
//along with this program; if not, write to the Free Software
//Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
void INCLUDEREPLACE(){CX_INCL("stdafx.h");}
void INCLUDEREPLACE(){CX_INCL("ComboBoxEx2.h");}




static char THIS_FILE[] =  "FILE" ;



///////////////////////////////////////////////////////////////////////////////
// CComboBoxEx2

//IMPLEMENT_DYNAMIC(CComboBoxEx2, CComboBoxEx)

/* BEGIN_MESSAGE_MAP(CComboBoxEx2, CComboBoxEx)
END_MESSAGE_MAP() */ //)

CComboBoxEx2::CComboBoxEx2()
{
}

CComboBoxEx2::~CComboBoxEx2()
{
}

int CComboBoxEx2::AddItem(const char* pszText, int iImage)
{
 COMBOBOXEXITEM cbi = {0};
 cbi.mask = CBEIF_TEXT;
 cbi.iItem = -1;
 cbi.pszText = (char *)pszText;
 if (iImage != -1)
 {
  cbi.mask |= CBEIF_IMAGE | CBEIF_SELECTEDIMAGE;
  cbi.iImage = iImage;
  cbi.iSelectedImage = iImage;
 }
 return InsertItem(&cbi);
}

int  CComboBoxEx2::PreTranslateMessage(MSG* pMsg)
{
 // there seems to be no way that we get the               for this control
 ASSERT( pMsg->message != WM_CHARTOITEM );

 if (pMsg->message == WM_KEYDOWN)
 {
  unsigned int uChar = MapVirtualKey(pMsg->wParam, 2);
  if (uChar != 0)
  {
   // CComboBox::SelectString seems also not to work
   CComboBox* pctrlCB = GetComboBoxCtrl();
   if (pctrlCB != NULL)
   {
    int iCount = pctrlCB->GetCount();
    for (int i = 0; i < iCount; i++)
    {
     CString strItem;
     pctrlCB->GetLBText(i, strItem);
     if (strItem.IsEmpty())
      continue;

     //those casts are indeed needed to get that running correctly for      code pages,
     //if that will also work for      code pages has to be tested..
     unsigned int uFirstChar      = (unsigned int)(_TUCHAR)strItem[0];
     unsigned int uFirstCharLower = (unsigned int)(_TUCHAR)_totlower((_TINT)(uFirstChar));
     unsigned int uTheChar        = (unsigned int)(_TUCHAR)_totlower((_TINT)((unsigned int)uChar));
     if (uFirstCharLower == uTheChar){
      SetCurSel(i);
      GetParent()->SendMessage(WM_COMMAND, MAKELONG((unsigned short)GetWindowLong(m_hWnd, GWL_ID), CBN_SELCHANGE), (long *)m_hWnd);
      return TRUE;
     }
    }
   }
  }
 }
 return CComboBoxEx::PreTranslateMessage(pMsg);
}

int  CComboBoxEx2::SelectString(const char* pszText)
{
 // CComboBox::SelectString seems also not to work
 CComboBox* pctrlCB = GetComboBoxCtrl();
 if (pctrlCB != NULL)
 {
  int iCount = pctrlCB->GetCount();
  for (int i = 0; i < iCount; i++)
  {
   CString strItem;
   pctrlCB->GetLBText(i, strItem);
   if (strItem == pszText)
   {
    SetCurSel(i);
    GetParent()->SendMessage(WM_COMMAND, MAKELONG((unsigned short)GetWindowLong(m_hWnd, GWL_ID), CBN_SELCHANGE), (long *)m_hWnd);
    return TRUE;
   }
  }
 }
 return FALSE;
}

int  CComboBoxEx2::SelectItemDataStringA(const char* pszText)
{
 CComboBox* pctrlCB = GetComboBoxCtrl();
 if (pctrlCB != NULL)
 {
  int iCount = pctrlCB->GetCount();
  for (int i = 0; i < iCount; i++)
  {
   void* pvItemData = GetItemDataPtr(i);
   if (pvItemData && strcmp((const char*)pvItemData, pszText) == 0)
   {
    SetCurSel(i);
    GetParent()->SendMessage(WM_COMMAND, MAKELONG((unsigned short)GetWindowLong(m_hWnd, GWL_ID), CBN_SELCHANGE), (long *)m_hWnd);
    return TRUE;
   }
  }
 }
 return FALSE;
}

void UpdateHorzExtent(CComboBox &rctlComboBox, int iIconWidth)
{
 int iItemCount = rctlComboBox.GetCount();
 if (iItemCount > 0)
 {
  CDC *pDC = rctlComboBox.GetDC();
  if (pDC != NULL)
  {
   // *** To get *ACCURATE* results from 'GetOutputTextExtent' one *MUST*
   // *** explicitly set the font!
   CFont *pOldFont = pDC->SelectObject(rctlComboBox.GetFont());

   CString strItem;
   int iMaxWidth = 0;
   for (int i = 0; i < iItemCount; i++)
   {
    rctlComboBox.GetLBText(i, strItem);
    int iItemWidth = pDC->GetOutputTextExtent(strItem, strItem.GetLength()).cx;
    if (iItemWidth > iMaxWidth)
     iMaxWidth = iItemWidth;
   }

   pDC->SelectObject(pOldFont);
   rctlComboBox.ReleaseDC(pDC);

   // Depending on the sometime the
   // width is just a few pixels too small!
   iMaxWidth += 4;
   if (iIconWidth)
    iMaxWidth += 2 + iIconWidth + 2;
   rctlComboBox.SetHorizontalExtent(iMaxWidth);
   if (rctlComboBox.GetDroppedWidth() < iMaxWidth)
    rctlComboBox.SetDroppedWidth(iMaxWidth);
  }
 }
 else
  rctlComboBox.SetHorizontalExtent(0);
}

void* GetComboBoxEditCtrl(CComboBox& cb)
{
 CWnd* pWnd = cb.GetWindow(GW_CHILD);
 while (pWnd)
 {
  char szClassName[MAX_PATH];
  if (::GetClassNameA(*pWnd, szClassName, ARRSIZE(szClassName)))
  {
   if (__ascii_stricmp(szClassName, "EDIT") == 0)
    return pWnd->m_hWnd;
  }
  pWnd = pWnd->GetNextWindow();
 }
 return NULL;
}






 